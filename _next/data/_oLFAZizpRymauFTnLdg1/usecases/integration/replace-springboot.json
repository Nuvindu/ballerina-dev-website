{"pageProps":{"samples":{"built-for-cloud":{"frontmatter":{"title":"Built for cloud","description":"<h3>If you wrote the code, it is ready for cloud.</h3>Ballerina's code-to-cloud feature streamlines the containerization and deployment process of an application using Docker and Kubernetes. It eliminates the need for manual configurations, as Ballerina's build tool generates the necessary artifacts seamlessly.","url":"https://ballerina.io/learn/run-in-the-cloud/code-to-cloud/code-to-cloud-deployment","image":""},"content":"","code":""},"configurability-bal":{"frontmatter":{"title":"Configurations in the ballerina file","description":"","url":"","image":""},"content":"\n```\ntype DataBaseConfig record {|\n    string host;\n    int port;\n    string user;\n    string password;\n    string database;\n|};\n\nconfigurable DataBaseConfig databaseConfig = ?;\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">DataBaseConfig</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> {</span><span style=\"color: #D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> host;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">int</span><span style=\"color: #24292E\"> port;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> user;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> password;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> database;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">|</span><span style=\"color: #24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">configurable</span><span style=\"color: #24292E\"> DataBaseConfig databaseConfig </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">?</span><span style=\"color: #24292E\">;</span></span></code></pre>"},"configurability-toml":{"frontmatter":{"title":"Config.toml changes","description":"","url":"","image":""},"content":"```\n# `Config.toml` is used to pass the configurations to the application\n[databaseConfig]\ndatabase = \"social_media_database\"\nuser = \"social_media_user\"\npassword = \"dummypassword\"\nhost = \"localhost\"\nport = 3306\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6A737D\"># `Config.toml` is used to pass the configurations to the application</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">[databaseConfig]</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">database </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;social_media_database&quot;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">user </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;social_media_user&quot;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">password </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;dummypassword&quot;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">host </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;localhost&quot;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">port </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">3306</span></span></code></pre>"},"configurability":{"frontmatter":{"title":"Configurations for consistent, safe, and reliable app development","description":"Effective configuration management is vital for agile application development.<br/><br/> Ballerina offers out-of-the-box support for configurability, empowering developers to customize and optimize their applications for diverse deployment scenarios.<br/><br/> Its comprehensive features enable seamless adaptation, collaboration, and consistent behavior, making it an ideal choice for API development.","url":"https://ballerina.io/learn/configure-ballerina-programs/configure-a-sample-ballerina-service","image":""},"content":"","code":""},"connect-with-anything":{"frontmatter":{"title":"Connect with anything","description":"Access thousands of connectors for HTTP APIs (OpenAPI), event APIs (AsyncAPI), GraphQL services, legacy systems, and data stores, allowing seamless data transfer to and from any system, anywhere.","url":"","image":"images/usecases/integration/connect-with-anything.png"},"content":"","code":""},"consume-rest-endpoints":{"frontmatter":{"title":"Consuming REST endpoints as resources","description":"Ballerina offers native support for network resources, including the ability to access REST endpoints as resources using the Ballerina HTTP client.","url":"https://ballerina.io/learn/bal-persist-overview","image":""},"content":"\n```\npublic function main() returns error? {\n    http:Client socialMediaClient = check new (\"localhost:9090/social-media\");\n    User[] users = check socialMediaClient->/users;\n    io:println(\"Retrieved all users: \" + users.toJsonString());\n    // ...\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error?</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    http</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Client socialMediaClient </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> (</span><span style=\"color: #032F62\">&quot;localhost:9090/social-media&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    User[] users </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> socialMediaClient</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #24292E\">users;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Retrieved all users: &quot;</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> users.</span><span style=\"color: #6F42C1\">toJsonString</span><span style=\"color: #24292E\">());</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// ...</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"diagram-when-you-need":{"frontmatter":{"title":"Diagram when you need it, Code when you don't","description":"Ballerina diagrams provide great creativity and flexibility in the early stages of development, allowing developers to visualize and iterate on their ideas quickly. However, developers can easily switch to writing code when delivering a more polished product and take advantage of Ballerina's powerful language features.","url":"","image":"images/usecases/integration/diagram-when-you-need-it.png"},"content":"","code":""},"github-copilot":{"frontmatter":{"title":"GitHub Copilot, your artificially intelligent pair programmer","description":"GitHub Copilot knows Ballerina. Why do all the work? Let Copilot do at least half of it.","url":"","image":"images/github-copilot.png"},"content":"","code":""},"go-native":{"frontmatter":{"title":"Go native with GraalVM","description":"<h3>If you wrote the code, native-executable is almost there.</h3>GraalVM is a versatile runtime supporting multiple languages. Native images, generated ahead of time, provide improved performance and reduced memory footprint. Ballerina leverages GraalVM's native image support, enabling efficient and lightweight deployments. This empowers developers to optimize their applications for resource-constrained environments, striking a balance between productivity and performance.","url":"https://ballerina.io/learn/build-a-native-executable/","image":""},"content":"","code":""},"openapi-tool":{"frontmatter":{"title":"OpenAPI; from spec to code and backwards","description":"Ballerina OpenAPI tool supports generating client/service code using OpenAPI specification. It also can generate an OpenAPI specification for a given REST service.","url":"https://ballerina.io/learn/openapi-tool","image":""},"content":"\n```\n// Generate service code using Ballerina OpenAPI tool\nbal openapi -i social_media_service.yaml --mode service\n\n// Generate client code using Ballerina OpenAPI tool\nbal openapi -i social_media_service.yaml --mode client\n\n// Generate OpenAPI specificatoin using service code\nbal openapi -i social_media_service.bal -o social_media_service.yaml\n\n```\n","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6A737D\">// Generate service code using Ballerina OpenAPI tool</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">bal openapi </span><span style=\"color: #D73A49\">-</span><span style=\"color: #24292E\">i social_media_service.yaml </span><span style=\"color: #D73A49\">--</span><span style=\"color: #24292E\">mode </span><span style=\"color: #D73A49\">service</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// Generate client code using Ballerina OpenAPI tool</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">bal openapi -i social_media_service.yaml --mode client</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// Generate OpenAPI specificatoin using service code</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">bal openapi -i social_media_service.bal -o social_media_service.yaml</span></span></code></pre>"},"relational-data":{"frontmatter":{"title":"Relational data access made simple","description":"Relational databases and REST are natural companions, as both involve data/resource manipulation using CRUD principles.<br/><br/> With its tailored data access layer for relational databases, Ballerina provides a seamless developer experience, making it the natural choice for REST API development with relational data stores.","url":"https://ballerina.io/learn/bal-persist-overview","image":""},"content":"\n```\nservice /social\\-media on new http:Listener(9090) {\n    // This client is generated using Ballerina persist module\n    final persistMysql:Client socialMediaDb;\n\n    public function init() returns error? {\n        // All MySQL client configurations are passed \n        // as configurations in the `Config.toml`\n        self.socialMediaDb = check new ();\n    }\n\n    resource function post users(@http:Payload User newUser)\n        returns http:Created|http:InternalServerError {\n        \n        int|persist:Error result = socialMediaDb->/users.post(newUser);\n\n        // ...\n    }\n}\n\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">service</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">/social</span><span style=\"color: #24292E\">\\-media </span><span style=\"color: #D73A49\">on</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> http:Listener(</span><span style=\"color: #005CC5\">9090</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// This client is generated using Ballerina persist module</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">final</span><span style=\"color: #24292E\"> persistMysql</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Client socialMediaDb;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">init</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error?</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #6A737D\">// All MySQL client configurations are passed </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #6A737D\">// as configurations in the `Config.toml`</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #005CC5\">self</span><span style=\"color: #24292E\">.socialMediaDb </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> ();</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">resource</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">post</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">users</span><span style=\"color: #24292E\">(@</span><span style=\"color: #005CC5\">http</span><span style=\"color: #24292E\">:</span><span style=\"color: #005CC5\">Payload</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">User</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">newUser</span><span style=\"color: #24292E\">)</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> http</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Created</span><span style=\"color: #D73A49\">|</span><span style=\"color: #24292E\">http:InternalServerError {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #005CC5\">int</span><span style=\"color: #D73A49\">|persist:</span><span style=\"color: #24292E\">Error result </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> socialMediaDb</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #24292E\">users.</span><span style=\"color: #6F42C1\">post</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">newUser</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #6A737D\">// ...</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"rest-bal":{"frontmatter":{"title":"Ballerina","description":"","url":"","image":""},"content":"\n```\ntype User record {|\n    int id;\n    @constraint:String {\n        minLength: 2\n    }\n    string name;\n    time:Date birthDate;\n|};\n\nservice /social\\-media on new http:Listener(9090) {\n\n    resource function post users(@http:Payload User newUser)\n        returns http:Created|http:InternalServerError {\n\n            // ...\n    }\n}\n\n```\n","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">User</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> {</span><span style=\"color: #D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">int</span><span style=\"color: #24292E\"> id;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    @</span><span style=\"color: #005CC5\">constraint</span><span style=\"color: #24292E\">:</span><span style=\"color: #005CC5\">String</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        minLength</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">2</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> name;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    time</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Date birthDate;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">|</span><span style=\"color: #24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">service</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">/social</span><span style=\"color: #24292E\">\\-media </span><span style=\"color: #D73A49\">on</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> http:Listener(</span><span style=\"color: #005CC5\">9090</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">resource</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">post</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">users</span><span style=\"color: #24292E\">(@</span><span style=\"color: #005CC5\">http</span><span style=\"color: #24292E\">:</span><span style=\"color: #005CC5\">Payload</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">User</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">newUser</span><span style=\"color: #24292E\">)</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> http</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Created</span><span style=\"color: #D73A49\">|</span><span style=\"color: #24292E\">http:InternalServerError {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #6A737D\">// ...</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"rest-constraints":{"frontmatter":{"title":"Constraints","description":"Request validation is vital for a sturdy API. Ballerina constraints offer effortless payload validations.","url":"","image":""},"content":"","code":""},"rest-hateoas":{"frontmatter":{"title":"HATEOAS","description":"REST is never complete without HATEOAS. Ballerina resource configurations are designed for hypermedia.","url":"","image":""},"content":"","code":""},"rest-resources":{"frontmatter":{"title":"Resources","description":"Ballerina has built-in support for network resources. Defining resources has never been this easy.","url":"","image":""},"content":"","code":""},"rest-springboot":{"frontmatter":{"title":"Spring Boot","description":"","url":"","image":""},"content":"\n```\npublic class User {\n    private int id;\n\n    @Size(min = 2, message = \"Name should have at least two characters\")\n    private String name;\n    \n    private LocalDate birthDate;\n\n    // ...\n}\n\n@RestController\n@RequestMapping(\"/social-media\")\npublic class SocialMediaController {\n\n    @PostMapping(\"/users\")\n    public ResponseEntity<User> createUser(@Valid @RequestBody User user) {\n        // ...\n        \n    }\n}\n\n```\n","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">public class</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">User</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">private</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">int</span><span style=\"color: #24292E\"> id;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    @</span><span style=\"color: #6F42C1\">Size</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">min</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">2</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">message</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;Name should have at least two characters&quot;</span><span style=\"color: #24292E\">)</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">private</span><span style=\"color: #24292E\"> String name;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">private</span><span style=\"color: #24292E\"> LocalDate birthDate;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// ...</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">@</span><span style=\"color: #005CC5\">RestController</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">@</span><span style=\"color: #005CC5\">RequestMapping</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;/social-media&quot;</span><span style=\"color: #24292E\">)</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">public class</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">SocialMediaController</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    @</span><span style=\"color: #6F42C1\">PostMapping</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;/users&quot;</span><span style=\"color: #24292E\">)</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> ResponseEntity</span><span style=\"color: #D73A49\">&lt;</span><span style=\"color: #24292E\">User</span><span style=\"color: #D73A49\">&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createUser</span><span style=\"color: #24292E\">(@</span><span style=\"color: #005CC5\">Valid</span><span style=\"color: #24292E\"> @</span><span style=\"color: #005CC5\">RequestBody</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">User</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">user</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #6A737D\">// ...</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"rest-statuscodes":{"frontmatter":{"title":"Status Code Responses","description":"Ballerina natively supports HTTP status code based responses, ensuring a refined API experience.","url":"","image":""},"content":"","code":""},"rest":{"frontmatter":{"title":"REST with a rest","description":"Developing REST APIs has never been this easy.","url":"https://github.com/shafreenAnfar/springboot-and-ballerina","image":""},"content":"","code":""}}},"__N_SSG":true}