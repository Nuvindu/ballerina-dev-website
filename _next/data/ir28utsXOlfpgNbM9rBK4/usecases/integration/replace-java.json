{"pageProps":{"samples":{"any-type-ballerina":{"frontmatter":{"title":"Ballerina","description":"","url":"","image":""},"content":"```\npublic function processValue(any value) {\n   if value is int {\n       int _ = value;\n       io:println(\"Received an integer: \" + value.toString());\n   } else if value is float {\n       float _ = value;\n       io:println(\"Received a float: \" + value.toString());\n   } else if value is string {\n       string _ = value;\n       io:println(\"Received a string: \" + value);\n   } else {\n       any _ = value;\n       io:println(\"Received an unknown value: \" + value.toString());\n   }\n}\n\n\npublic function main() {\n   processValue(10);       // Output: Received an integer: 10\n   processValue(3.14);     // Output: Received a float: 3.14\n   processValue(\"Hello\");  // Output: Received a string: Hello\n   processValue(true);     // Output: Received an unknown value: true\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">processValue</span><span style=\"color: #24292E\">(</span><span style=\"color: #D73A49\">any</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">value</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> value </span><span style=\"color: #D73A49\">is</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">int</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">       </span><span style=\"color: #005CC5\">int</span><span style=\"color: #24292E\"> _ </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> value;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">       io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Received an integer: &quot;</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> value.</span><span style=\"color: #6F42C1\">toString</span><span style=\"color: #24292E\">());</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   } </span><span style=\"color: #D73A49\">else</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> value </span><span style=\"color: #D73A49\">is</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">float</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">       </span><span style=\"color: #005CC5\">float</span><span style=\"color: #24292E\"> _ </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> value;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">       io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Received a float: &quot;</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> value.</span><span style=\"color: #6F42C1\">toString</span><span style=\"color: #24292E\">());</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   } </span><span style=\"color: #D73A49\">else</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> value </span><span style=\"color: #D73A49\">is</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">       </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> _ </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> value;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">       io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Received a string: &quot;</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">value</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   } </span><span style=\"color: #D73A49\">else</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">       </span><span style=\"color: #D73A49\">any</span><span style=\"color: #24292E\"> _ </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> value;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">       io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Received an unknown value: &quot;</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> value.</span><span style=\"color: #6F42C1\">toString</span><span style=\"color: #24292E\">());</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #6F42C1\">processValue</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">10</span><span style=\"color: #24292E\">);       </span><span style=\"color: #6A737D\">// Output: Received an integer: 10</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #6F42C1\">processValue</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">3.14</span><span style=\"color: #24292E\">);     </span><span style=\"color: #6A737D\">// Output: Received a float: 3.14</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #6F42C1\">processValue</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Hello&quot;</span><span style=\"color: #24292E\">);  </span><span style=\"color: #6A737D\">// Output: Received a string: Hello</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #6F42C1\">processValue</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">true</span><span style=\"color: #24292E\">);     </span><span style=\"color: #6A737D\">// Output: Received an unknown value: true</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"any-type-java":{"frontmatter":{"title":"Java","description":"","url":"","image":""},"content":"```\npublic static void processValue(Object value) {\n   if (value instanceof Integer intVal) {\n       Integer i = intVal;\n       System.out.println(\"Received an integer: \" + value);\n   } else if (value instanceof Float floatVal) {\n       Float f = floatVal;\n       System.out.println(\"Received a float: \" + value);\n   } else if (value instanceof String str) {\n       String s = str;\n       System.out.println(\"Received a string: \" + value);\n   } else {\n       Object obj = value;\n       System.out.println(\"Received an unknown value: \" + value);\n   }\n}\n\n\npublic static void main(String[] args) {\n   processValue(10);       // Output: Received an integer: 10\n   processValue(3.14f);    // Output: Received a float: 3.14\n   processValue(\"Hello\");  // Output: Received a string: Hello\n   processValue(true);     // Output: Received an unknown value: true\n}\n\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> static void </span><span style=\"color: #6F42C1\">processValue</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">Object</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">value</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> (value instanceof Integer intVal) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">       Integer i </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> intVal;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">       System.out.</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Received an integer: &quot;</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">value</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   } </span><span style=\"color: #D73A49\">else</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> (value instanceof Float floatVal) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">       Float f </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> floatVal;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">       System.out.</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Received a float: &quot;</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">value</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   } </span><span style=\"color: #D73A49\">else</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> (value instanceof String str) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">       String s </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> str;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">       System.out.</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Received a string: &quot;</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">value</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   } </span><span style=\"color: #D73A49\">else</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">       Object obj </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> value;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">       System.out.</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Received an unknown value: &quot;</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">value</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> static void </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">String</span><span style=\"color: #24292E\">[] </span><span style=\"color: #E36209\">args</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #6F42C1\">processValue</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">10</span><span style=\"color: #24292E\">);       </span><span style=\"color: #6A737D\">// Output: Received an integer: 10</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #6F42C1\">processValue</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">3.14</span><span style=\"color: #24292E\">f);    </span><span style=\"color: #6A737D\">// Output: Received a float: 3.14</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #6F42C1\">processValue</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Hello&quot;</span><span style=\"color: #24292E\">);  </span><span style=\"color: #6A737D\">// Output: Received a string: Hello</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #6F42C1\">processValue</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">true</span><span style=\"color: #24292E\">);     </span><span style=\"color: #6A737D\">// Output: Received an unknown value: true</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"any-type":{"frontmatter":{"title":"Any type","description":"In Ballerina, you can represent data with generic data types using the `any` type. `any` means any value except an error value. You can use `any|error` for absolutely any value. This provides a way to represent data without specifying a specific type explicitly. In Java, you can use the `Object` class to represent any type of data.","url":"","image":""},"content":"","code":""},"data-immutability-ballerina":{"frontmatter":{"title":"Ballerina","description":"","url":"","image":""},"content":"```\nconst int x = 10;\n\ntype Student record {|\n    int grade;\n    string name;\n    map<int> marks;\n|};\n\npublic function main() {\n    // x = 20; // Error: Cannot assign a new value to immutable variable\n    \n    Student & readonly student = {\n        grade: 12,\n        name: \"John\",\n        // The applicable contextually-expected type for marks now is `map<int> & readonly`.\n        // Thus, the value for marks will be constructed as an immutable map.\n        marks: {\n            \"Maths\": 75,\n            \"English\": 90\n        }\n    };\n    // student.grade = 11; // Error: Cannot assign a new value to readonly field\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">const </span><span style=\"color: #005CC5\">int</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">x</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">10</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Student</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> {</span><span style=\"color: #D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">int</span><span style=\"color: #24292E\"> grade;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> name;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">map&lt;</span><span style=\"color: #005CC5\">int</span><span style=\"color: #D73A49\">&gt;</span><span style=\"color: #24292E\"> marks;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">|</span><span style=\"color: #24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// x = 20; // Error: Cannot assign a new value to immutable variable</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    Student </span><span style=\"color: #D73A49\">&amp;</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">readonly</span><span style=\"color: #24292E\"> student </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        grade</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">12</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        name</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;John&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #6A737D\">// The applicable contextually-expected type for marks now is `map&lt;int&gt; &amp; readonly`.</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #6A737D\">// Thus, the value for marks will be constructed as an immutable map.</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        marks</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #032F62\">&quot;Maths&quot;</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">75</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #032F62\">&quot;English&quot;</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">90</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    };</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// student.grade = 11; // Error: Cannot assign a new value to readonly field</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"data-immutability-java":{"frontmatter":{"title":"Java","description":"","url":"","image":""},"content":"```\npublic class Immutability {\n    public class Main {\n        public static void main(String[] args) {\n            final int x = 10;\n            // x = 20; // Error: Cannot assign a new value to final variable\n\n            final StringBuilder sb = new StringBuilder(\"Hello\");\n            sb.append(\", World\"); // Modifying the state of the StringBuilder object\n\n            System.out.println(sb.toString()); // Output: Hello, World\n        }\n    }\n\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">public class</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Immutability</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">class</span><span style=\"color: #24292E\"> Main {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> static void </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">String</span><span style=\"color: #24292E\">[] </span><span style=\"color: #E36209\">args</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">final</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">int</span><span style=\"color: #24292E\"> x </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">10</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #6A737D\">// x = 20; // Error: Cannot assign a new value to final variable</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">final</span><span style=\"color: #24292E\"> StringBuilder sb </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">StringBuilder</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Hello&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            sb.</span><span style=\"color: #6F42C1\">append</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;, World&quot;</span><span style=\"color: #24292E\">); </span><span style=\"color: #6A737D\">// Modifying the state of the StringBuilder object</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">            System.out.</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(sb.</span><span style=\"color: #6F42C1\">toString</span><span style=\"color: #24292E\">()); </span><span style=\"color: #6A737D\">// Output: Hello, World</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"data-immutability":{"frontmatter":{"title":"Data immutability","description":"Ballerina and Java approach data immutability differently. While Ballerina promotes immutability by default, Java does not enforce immutability at the language level. Immutable data ensures data integrity, simplifies reasoning about code, and reduces the potential for unexpected side effects. Ballerina's focus on immutability makes it well-suited for data-oriented programming paradigms where maintaining the integrity and consistency of data is crucial.","url":"","image":""},"content":"","code":""},"expressive-query":{"frontmatter":{"title":"Expressive query language","description":"Ballerina's query language is a powerful feature that enhances data-oriented programming by providing a concise and expressive way to transform and manipulate data. It allows developers to perform complex data operations such as filtering, mapping, aggregating, and sorting with ease. The query language in Ballerina is specifically designed to work seamlessly with structured data types like records, making it well-suited for data-oriented programming tasks.","url":"","image":""},"content":"```\nimport ballerina/io;\n\ntype Country record {|\n    string country;\n    string continent;\n    int population;\n    int cases;\n    int deaths;\n|};\n\npublic function main() returns error? {\n    // Perform data transformation using Ballerina's query language\n    json summary = from var {country, continent, population, cases, deaths} in check covidClient->/countries\n                   where population >= 100000 && deaths >= 100\n                   let decimal caseFatalityRatio = (decimal) deaths / (decimal) cases * 100\n                   order by caseFatalityRatio descending\n                   limit 10\n                   select {country, continent, population, caseFatalityRatio};\n\n    io:println(summary);\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> ballerina/io;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Country</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> {</span><span style=\"color: #D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> country;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> continent;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">int</span><span style=\"color: #24292E\"> population;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">int</span><span style=\"color: #24292E\"> cases;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">int</span><span style=\"color: #24292E\"> deaths;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">|</span><span style=\"color: #24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error?</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Perform data transformation using Ballerina&#39;s query language</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">json</span><span style=\"color: #24292E\"> summary </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">var</span><span style=\"color: #24292E\"> {country, continent, population, cases, deaths} </span><span style=\"color: #D73A49\">in</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> covidClient</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #24292E\">countries</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                   </span><span style=\"color: #D73A49\">where</span><span style=\"color: #24292E\"> population </span><span style=\"color: #D73A49\">&gt;=</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">100000</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">&amp;&amp;</span><span style=\"color: #24292E\"> deaths </span><span style=\"color: #D73A49\">&gt;=</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">100</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                   </span><span style=\"color: #D73A49\">let</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">decimal</span><span style=\"color: #24292E\"> caseFatalityRatio </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> (</span><span style=\"color: #005CC5\">decimal</span><span style=\"color: #24292E\">) deaths </span><span style=\"color: #D73A49\">/</span><span style=\"color: #24292E\"> (</span><span style=\"color: #005CC5\">decimal</span><span style=\"color: #24292E\">) cases </span><span style=\"color: #D73A49\">*</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">100</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                   </span><span style=\"color: #D73A49\">order</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">by</span><span style=\"color: #24292E\"> caseFatalityRatio </span><span style=\"color: #D73A49\">descending</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                   </span><span style=\"color: #D73A49\">limit</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">10</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                   </span><span style=\"color: #D73A49\">select</span><span style=\"color: #24292E\"> {country, continent, population, caseFatalityRatio};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">summary</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"flexible-typing-ballerina":{"frontmatter":{"title":"Ballerina","description":"","url":"","image":""},"content":"```\ntype Author record {\n   string firstName;\n   string lastName;\n};\n\npublic function main() {\n   Author author = {\n       firstName: \"Chiran\",\n       lastName: \"Fernando\"\n   };\n  \n   author[\"fullName\"] = \"Chiran Fernando\";\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Author</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> firstName;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> lastName;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   Author author </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">       firstName</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;Chiran&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">       lastName</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;Fernando&quot;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   };</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   author[</span><span style=\"color: #032F62\">&quot;fullName&quot;</span><span style=\"color: #24292E\">] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;Chiran Fernando&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"flexible-typing-java":{"frontmatter":{"title":"Java","description":"","url":"","image":""},"content":"```\nrecord Author(String firstName, String lastName) {};\n\nrecord AuthorWithFullName(Author author, String fullName) {};\n\npublic static void main(String[] args) {\n   Author author = new Author(\"Chiran\", \"Fernando\");\n   AuthorWithFullName authorWithFullName = new AuthorWithFullName(author, author.firstName() + author.lastName());\n   System.out.println(authorWithFullName);\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Author</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">String</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">firstName</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">String</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">lastName</span><span style=\"color: #24292E\">) {};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">AuthorWithFullName</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">Author</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">author</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">String</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">fullName</span><span style=\"color: #24292E\">) {};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> static void </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">String</span><span style=\"color: #24292E\">[] </span><span style=\"color: #E36209\">args</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   Author author </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Author</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Chiran&quot;</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">&quot;Fernando&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   AuthorWithFullName authorWithFullName </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">AuthorWithFullName</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">author</span><span style=\"color: #24292E\">, author.</span><span style=\"color: #6F42C1\">firstName</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> author.</span><span style=\"color: #6F42C1\">lastName</span><span style=\"color: #24292E\">());</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   System.out.</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">authorWithFullName</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"flexible-typing":{"frontmatter":{"title":"Enrich data with flexible typing","description":"Ballerina’s type system allows you to add record fields on the fly, using the bracket notation, like in a dynamically-typed language. This is a very useful feature when you need to enrich data with calculated fields. <br>In Java, you need to create a new structure to represent the enriched data.","url":"","image":""},"content":"","code":""},"json-n-xml-support-ballerina":{"frontmatter":{"title":"Ballerina","description":"","url":"","image":""},"content":"```\nimport ballerina/io;\nimport ballerina/xmldata;\n\ntype Address record {|\n    string street;\n    int city;\n|};\n\npublic function main() returns error? {\n    json jsonValue = {\n        \"Store\": {\n            \"@id\": \"AST\",\n            \"name\": \"Anne\",\n            \"Address\": {\n                \"street\": \"Main\",\n                \"city\": \"94\"\n            },\n            \"codes\": [\"4\", \"8\"]\n        }\n    };\n\n    // Convert JSON to XML\n    xml? xmlValue = check xmldata:fromJson(jsonValue);\n\n    if xmlValue is () {\n        return;\n    }\n\n    // Extract data from XML\n    string name = (xmlValue/**/<name>).data();\n    Address address = check xmldata:fromXml(xmlValue/<Address>);\n   \n    // Print the values\n    io:println(string `${name} lives in ${address.street} street, ${address.city}`);\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> ballerina/io;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> ballerina/xmldata;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Address</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> {</span><span style=\"color: #D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> street;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">int</span><span style=\"color: #24292E\"> city;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">|</span><span style=\"color: #24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error?</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">json</span><span style=\"color: #24292E\"> jsonValue </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #032F62\">&quot;Store&quot;</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #032F62\">&quot;@id&quot;</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;AST&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #032F62\">&quot;name&quot;</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;Anne&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #032F62\">&quot;Address&quot;</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                </span><span style=\"color: #032F62\">&quot;street&quot;</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;Main&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                </span><span style=\"color: #032F62\">&quot;city&quot;</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;94&quot;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            },</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #032F62\">&quot;codes&quot;</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> [</span><span style=\"color: #032F62\">&quot;4&quot;</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">&quot;8&quot;</span><span style=\"color: #24292E\">]</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Convert JSON to XML</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">xml</span><span style=\"color: #24292E\">? xmlValue </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> xmldata</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">fromJson</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">jsonValue</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> xmlValue </span><span style=\"color: #D73A49\">is</span><span style=\"color: #24292E\"> () {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Extract data from XML</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> name </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> (</span><span style=\"color: #E36209\">xmlValue</span><span style=\"color: #D73A49\">/**/&lt;</span><span style=\"color: #E36209\">name</span><span style=\"color: #D73A49\">&gt;</span><span style=\"color: #24292E\">).</span><span style=\"color: #6F42C1\">data</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    Address address </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> xmldata</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">fromXml</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">xmlValue</span><span style=\"color: #D73A49\">/&lt;</span><span style=\"color: #E36209\">Address</span><span style=\"color: #D73A49\">&gt;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Print the values</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">`${</span><span style=\"color: #24292E\">name</span><span style=\"color: #032F62\">} lives in ${</span><span style=\"color: #24292E\">address</span><span style=\"color: #032F62\">.</span><span style=\"color: #24292E\">street</span><span style=\"color: #032F62\">} street, ${</span><span style=\"color: #24292E\">address</span><span style=\"color: #032F62\">.</span><span style=\"color: #24292E\">city</span><span style=\"color: #032F62\">}`</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"json-n-xml-support-java":{"frontmatter":{"title":"Java","description":"","url":"","image":""},"content":"```\nimport org.json.JSONObject;\nimport org.json.XML;\n\npublic class Main {\n    public static void main(String[] args) {\n        String jsonString = \"{\\\"Store\\\":{\\\"@id\\\":\\\"AST\\\",\\\"name\\\":\\\"Anne\\\",\\\"Address\\\":{\\\"street\\\":\\\"Main\\\",\\\"city\\\":\\\"94\\\"},\\\"codes\\\":[\\\"4\\\",\\\"8\\\"]}}\";\n\n        // Convert JSON string to JSON object\n        JSONObject jsonObject = new JSONObject(jsonString);\n\n        // Convert JSON object to XML string\n        String xmlString = XML.toString(jsonObject);\n\n        // Convert XML string to XML elements\n        org.w3c.dom.Document document = XML.toJSONObject(xmlString).getOwnerDocument();\n        org.w3c.dom.Element rootElement = document.getDocumentElement();\n\n        // Get the values from the XML elements\n        String id = rootElement.getAttribute(\"id\");\n        String name = rootElement.getElementsByTagName(\"name\").item(0).getTextContent();\n        String street = rootElement.getElementsByTagName(\"street\").item(0).getTextContent();\n        String city = rootElement.getElementsByTagName(\"city\").item(0).getTextContent();\n\n        // Print the values\n        System.out.println(name + \" lives in \" + street + \" street, \" + city);\n    }\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> org.</span><span style=\"color: #005CC5\">json</span><span style=\"color: #24292E\">.JSONObject;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> org.</span><span style=\"color: #005CC5\">json</span><span style=\"color: #24292E\">.XML;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">public class</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Main</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> static void </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">String</span><span style=\"color: #24292E\">[] </span><span style=\"color: #E36209\">args</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        String jsonString </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;{</span><span style=\"color: #005CC5\">\\&quot;</span><span style=\"color: #032F62\">Store</span><span style=\"color: #005CC5\">\\&quot;</span><span style=\"color: #032F62\">:{</span><span style=\"color: #005CC5\">\\&quot;</span><span style=\"color: #032F62\">@id</span><span style=\"color: #005CC5\">\\&quot;</span><span style=\"color: #032F62\">:</span><span style=\"color: #005CC5\">\\&quot;</span><span style=\"color: #032F62\">AST</span><span style=\"color: #005CC5\">\\&quot;</span><span style=\"color: #032F62\">,</span><span style=\"color: #005CC5\">\\&quot;</span><span style=\"color: #032F62\">name</span><span style=\"color: #005CC5\">\\&quot;</span><span style=\"color: #032F62\">:</span><span style=\"color: #005CC5\">\\&quot;</span><span style=\"color: #032F62\">Anne</span><span style=\"color: #005CC5\">\\&quot;</span><span style=\"color: #032F62\">,</span><span style=\"color: #005CC5\">\\&quot;</span><span style=\"color: #032F62\">Address</span><span style=\"color: #005CC5\">\\&quot;</span><span style=\"color: #032F62\">:{</span><span style=\"color: #005CC5\">\\&quot;</span><span style=\"color: #032F62\">street</span><span style=\"color: #005CC5\">\\&quot;</span><span style=\"color: #032F62\">:</span><span style=\"color: #005CC5\">\\&quot;</span><span style=\"color: #032F62\">Main</span><span style=\"color: #005CC5\">\\&quot;</span><span style=\"color: #032F62\">,</span><span style=\"color: #005CC5\">\\&quot;</span><span style=\"color: #032F62\">city</span><span style=\"color: #005CC5\">\\&quot;</span><span style=\"color: #032F62\">:</span><span style=\"color: #005CC5\">\\&quot;</span><span style=\"color: #032F62\">94</span><span style=\"color: #005CC5\">\\&quot;</span><span style=\"color: #032F62\">},</span><span style=\"color: #005CC5\">\\&quot;</span><span style=\"color: #032F62\">codes</span><span style=\"color: #005CC5\">\\&quot;</span><span style=\"color: #032F62\">:[</span><span style=\"color: #005CC5\">\\&quot;</span><span style=\"color: #032F62\">4</span><span style=\"color: #005CC5\">\\&quot;</span><span style=\"color: #032F62\">,</span><span style=\"color: #005CC5\">\\&quot;</span><span style=\"color: #032F62\">8</span><span style=\"color: #005CC5\">\\&quot;</span><span style=\"color: #032F62\">]}}&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #6A737D\">// Convert JSON string to JSON object</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        JSONObject jsonObject </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">JSONObject</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">jsonString</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #6A737D\">// Convert JSON object to XML string</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        String xmlString </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> XML.</span><span style=\"color: #6F42C1\">toString</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">jsonObject</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #6A737D\">// Convert XML string to XML elements</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        org.w3c.dom.Document document </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> XML.</span><span style=\"color: #6F42C1\">toJSONObject</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">xmlString</span><span style=\"color: #24292E\">).</span><span style=\"color: #6F42C1\">getOwnerDocument</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        org.w3c.dom.Element rootElement </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> document.</span><span style=\"color: #6F42C1\">getDocumentElement</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #6A737D\">// Get the values from the XML elements</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        String id </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> rootElement.</span><span style=\"color: #6F42C1\">getAttribute</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;id&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        String name </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> rootElement.</span><span style=\"color: #6F42C1\">getElementsByTagName</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;name&quot;</span><span style=\"color: #24292E\">).</span><span style=\"color: #6F42C1\">item</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">).</span><span style=\"color: #6F42C1\">getTextContent</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        String street </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> rootElement.</span><span style=\"color: #6F42C1\">getElementsByTagName</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;street&quot;</span><span style=\"color: #24292E\">).</span><span style=\"color: #6F42C1\">item</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">).</span><span style=\"color: #6F42C1\">getTextContent</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        String city </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> rootElement.</span><span style=\"color: #6F42C1\">getElementsByTagName</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;city&quot;</span><span style=\"color: #24292E\">).</span><span style=\"color: #6F42C1\">item</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">).</span><span style=\"color: #6F42C1\">getTextContent</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #6A737D\">// Print the values</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        System.out.</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">name</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot; lives in &quot;</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">street</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot; street, &quot;</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">city</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"json-n-xml-support":{"frontmatter":{"title":"JSON and XML support","description":"Ballerina has native support for working with JSON and XML data formats. It provides specialized types and built-in operators to handle these data structures. By abstracting the complexities of working with JSON and XML, Ballerina promotes data separation by providing high-level abstractions for data manipulation. <br>Java, on the other hand, does not have built-in support for JSON and XML. Developers have to use third-party libraries to work with these data formats.","url":"","image":""},"content":"","code":""},"optional-types-ballerina":{"frontmatter":{"title":"Ballerina","description":"","url":"","image":""},"content":"```\nimport ballerina/io;\n\ntype Person record {\n    string name;\n    int? age;\n    string? email;\n};\n\npublic function main() returns error? {\n    json jsonInput = {\n        \"name\": \"John Doe\",\n        \"email\": \"abc@mail.com\",\n        \"age\": null,\n        id: 1\n    };\n    Person person = check jsonInput.fromJsonWithType();\n\n    //optional value access\n    int? ageInFiveYears = person.age + 5;\n    io:println(ageInFiveYears);\n\n    var {name: _, email, name: _} = person;\n    boolean emailValid = email !is null \n        ? email.matches(re `^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$`) \n        : false;\n    io:println(emailValid);\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> ballerina/io;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Person</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> name;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">int</span><span style=\"color: #24292E\">? age;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\">? email;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error?</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">json</span><span style=\"color: #24292E\"> jsonInput </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #032F62\">&quot;name&quot;</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;John Doe&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #032F62\">&quot;email&quot;</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;abc@mail.com&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #032F62\">&quot;age&quot;</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">null</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        id</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">1</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    };</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    Person person </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> jsonInput.</span><span style=\"color: #6F42C1\">fromJsonWithType</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">//optional value access</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">int</span><span style=\"color: #24292E\">? ageInFiveYears </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> person.age </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">5</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">ageInFiveYears</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">var</span><span style=\"color: #24292E\"> {name</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> _, email, name</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> _} </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> person;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">boolean</span><span style=\"color: #24292E\"> emailValid </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> email </span><span style=\"color: #D73A49\">!is</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">null</span><span style=\"color: #24292E\"> </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">?</span><span style=\"color: #24292E\"> email.</span><span style=\"color: #6F42C1\">matches</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">re</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">`^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+</span><span style=\"color: #005CC5\">\\.</span><span style=\"color: #032F62\">[A-Za-z]{2,}$`</span><span style=\"color: #24292E\">) </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">false</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">emailValid</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"optional-types-java":{"frontmatter":{"title":"Java","description":"","url":"","image":""},"content":"```\nimport com.fasterxml.jackson.annotation.JsonCreator;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport java.util.Optional;\n\nrecord Person(\n        @JsonProperty(\"name\") String name,\n        @JsonProperty(\"email\") String email,\n        @JsonProperty(\"age\") Optional<Integer> age,\n        @JsonProperty(\"id\") int id\n) {\n\n    @JsonCreator\n    public static Person create(\n            @JsonProperty(\"name\") String name,\n            @JsonProperty(\"email\") String email,\n            @JsonProperty(\"age\") Optional<Integer> age,\n            @JsonProperty(\"id\") int id\n    ) {\n        return new Person(name, email, age, id);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws JsonProcessingException {\n        String jsonInput = \"\"\"\n                {\n                    \"name\": \"John Doe\",\n                    \"email\": \"abc@mail.com\",\n                    \"age\": null,\n                    \"id\": 1\n                }\n                \"\"\";\n\n        Person person = new ObjectMapper().readValue(jsonInput, Person.class);\n\n        //optional age access\n        int ageInFiveYears = person.age().orElse(-1) + 5;\n        System.out.println(ageInFiveYears);\n\n        boolean validEmail = person.email() != null\n                ? person.email().matches(\"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}$\")\n                : false;\n        System.out.println(validEmail);\n    }\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> com.fasterxml.jackson.</span><span style=\"color: #D73A49\">annotation</span><span style=\"color: #24292E\">.JsonCreator;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> com.fasterxml.jackson.</span><span style=\"color: #D73A49\">annotation</span><span style=\"color: #24292E\">.JsonProperty;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> com.fasterxml.jackson.core.JsonProcessingException;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> com.fasterxml.jackson.databind.ObjectMapper;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> java.util.Optional;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Person</span><span style=\"color: #24292E\">(</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        @</span><span style=\"color: #005CC5\">JsonProperty</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;name&quot;</span><span style=\"color: #24292E\">) </span><span style=\"color: #E36209\">String</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">name</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        @</span><span style=\"color: #005CC5\">JsonProperty</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;email&quot;</span><span style=\"color: #24292E\">) </span><span style=\"color: #E36209\">String</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">email</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        @</span><span style=\"color: #005CC5\">JsonProperty</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;age&quot;</span><span style=\"color: #24292E\">) </span><span style=\"color: #E36209\">Optional</span><span style=\"color: #D73A49\">&lt;</span><span style=\"color: #E36209\">Integer</span><span style=\"color: #D73A49\">&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">age</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        @</span><span style=\"color: #005CC5\">JsonProperty</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;id&quot;</span><span style=\"color: #24292E\">) </span><span style=\"color: #005CC5\">int</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">id</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    @</span><span style=\"color: #005CC5\">JsonCreator</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> static Person </span><span style=\"color: #6F42C1\">create</span><span style=\"color: #24292E\">(</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            @</span><span style=\"color: #005CC5\">JsonProperty</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;name&quot;</span><span style=\"color: #24292E\">) </span><span style=\"color: #E36209\">String</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">name</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            @</span><span style=\"color: #005CC5\">JsonProperty</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;email&quot;</span><span style=\"color: #24292E\">) </span><span style=\"color: #E36209\">String</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">email</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            @</span><span style=\"color: #005CC5\">JsonProperty</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;age&quot;</span><span style=\"color: #24292E\">) </span><span style=\"color: #E36209\">Optional</span><span style=\"color: #D73A49\">&lt;</span><span style=\"color: #E36209\">Integer</span><span style=\"color: #D73A49\">&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">age</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            @</span><span style=\"color: #005CC5\">JsonProperty</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;id&quot;</span><span style=\"color: #24292E\">) </span><span style=\"color: #005CC5\">int</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">id</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    ) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Person</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">name</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">email</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">age</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">id</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">public class</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Main</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> static void </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">String</span><span style=\"color: #24292E\">[] </span><span style=\"color: #E36209\">args</span><span style=\"color: #24292E\">) throws JsonProcessingException {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        String jsonInput </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;&quot;&quot;</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">                </span><span style=\"color: #B31D28; font-style: italic\">{</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                    </span><span style=\"color: #032F62\">&quot;name&quot;</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;John Doe&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                    </span><span style=\"color: #032F62\">&quot;email&quot;</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;abc@mail.com&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                    </span><span style=\"color: #032F62\">&quot;age&quot;</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">null</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                    </span><span style=\"color: #032F62\">&quot;id&quot;</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">1</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                </span><span style=\"color: #032F62\">&quot;&quot;&quot;</span><span style=\"color: #B31D28; font-style: italic\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">        Person person </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">ObjectMapper</span><span style=\"color: #24292E\">().</span><span style=\"color: #6F42C1\">readValue</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">jsonInput</span><span style=\"color: #24292E\">, Person.class);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #6A737D\">//optional age access</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #005CC5\">int</span><span style=\"color: #24292E\"> ageInFiveYears </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> person.</span><span style=\"color: #6F42C1\">age</span><span style=\"color: #24292E\">().</span><span style=\"color: #6F42C1\">orElse</span><span style=\"color: #24292E\">(</span><span style=\"color: #D73A49\">-</span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">) </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">5</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        System.out.</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">ageInFiveYears</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #005CC5\">boolean</span><span style=\"color: #24292E\"> validEmail </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> person.</span><span style=\"color: #6F42C1\">email</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">!=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">null</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                </span><span style=\"color: #D73A49\">?</span><span style=\"color: #24292E\"> person.</span><span style=\"color: #6F42C1\">email</span><span style=\"color: #24292E\">().</span><span style=\"color: #6F42C1\">matches</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+</span><span style=\"color: #005CC5\">\\\\</span><span style=\"color: #032F62\">.[A-Za-z]{2,}$&quot;</span><span style=\"color: #24292E\">)</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                </span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">false</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        System.out.</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">validEmail</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"optional-types":{"frontmatter":{"title":"Optional types","description":"In Ballerina, optional types are built into the language, ensuring that optional types are explicitly handled, reducing the risk of null pointer exceptions and related bugs. <br>It seamlessly integrates with other data structures, such as records and objects, allowing easy handling of nullable fields within complex data structures. <br>In Java, nullable fields are typically handled using annotations or external libraries, which may require additional boilerplate code and can be error-prone. <br>With Ballerina's robust support for optional types, the separation of code from data is reinforced, enabling more reliable and efficient data-oriented programming.","url":"","image":""},"content":"","code":""},"pattern-matching-ballerina":{"frontmatter":{"title":"Ballerina","description":"","url":"","image":""},"content":"```\nimport ballerina/io;\n\nconst switchStatus = \"ON\";\n\nfunction matchValue(any val, boolean isObstructed, float powerPercentage) returns string {\n    // The value of the `val` variable is matched against the given value match patterns.\n    match val {\n        // The `if !isObstructed` match guard is used.\n        1 if !isObstructed => {\n            // This block will execute if `!isObstructed` is true.\n            return \"Move forward\";\n        }\n        // Use `|` to match more than one value.\n        2|3 => {\n            return \"Turn\";\n        }\n        //The `if 25.0 < powerPercentage` match guard is used.\n        4 if 25.0 < powerPercentage => {\n            // This block will execute if `25.0 < powerPercentage` is true.\n            return  \"Increase speed\";\n        }\n        \"STOP\" => {\n            return \"STOP\";\n        }\n        switchStatus => {\n            return \"Switch ON\";\n        }\n        // Use `_` to match type `any`.\n        _ => {\n            return \"Invalid instruction\";\n        }\n    }\n}\n\npublic function main() {\n    io:println(matchValue(1, false, 36.0));\n    io:println(matchValue(4, false, 36.0));\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> ballerina/io;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const </span><span style=\"color: #005CC5\">switchStatus</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;ON&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">matchValue</span><span style=\"color: #24292E\">(</span><span style=\"color: #D73A49\">any</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">val</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">boolean</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">isObstructed</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">float</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">powerPercentage</span><span style=\"color: #24292E\">) </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// The value of the `val` variable is matched against the given value match patterns.</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">match</span><span style=\"color: #24292E\"> val {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #6A737D\">// The `if !isObstructed` match guard is used.</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">!</span><span style=\"color: #24292E\">isObstructed </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #6A737D\">// This block will execute if `!isObstructed` is true.</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;Move forward&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #6A737D\">// Use `|` to match more than one value.</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #005CC5\">2</span><span style=\"color: #D73A49\">|</span><span style=\"color: #005CC5\">3</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;Turn&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #6A737D\">//The `if 25.0 &lt; powerPercentage` match guard is used.</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #005CC5\">4</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">25.0</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">&lt;</span><span style=\"color: #24292E\"> powerPercentage </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #6A737D\">// This block will execute if `25.0 &lt; powerPercentage` is true.</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\">  </span><span style=\"color: #032F62\">&quot;Increase speed&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #032F62\">&quot;STOP&quot;</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;STOP&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        switchStatus </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;Switch ON&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #6A737D\">// Use `_` to match type `any`.</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        _ </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;Invalid instruction&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">matchValue</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">false</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">36.0</span><span style=\"color: #24292E\">));</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">matchValue</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">4</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">false</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">36.0</span><span style=\"color: #24292E\">));</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"pattern-matching-java":{"frontmatter":{"title":"Java","description":"","url":"","image":""},"content":"```\npublic class PatternMatching {\n        public static String matchValue(Object val, boolean isObstructed, float powerPercentage) {\n            switch (val.toString()) {\n                case \"1\":\n                    if (!isObstructed) {\n                        return \"Move forward\";\n                    }\n                    break;\n                case \"2\":\n                case \"3\":\n                    return \"Turn\";\n                case \"4\":\n                    if (powerPercentage > 25.0) {\n                        return \"Increase speed\";\n                    }\n                    break;\n                case \"STOP\":\n                    return \"STOP\";\n                case \"ON\":\n                    return \"Switch ON\";\n                default:\n                    return \"Invalid instruction\";\n            }\n            return \"Invalid instruction\";\n        }\n\n        public static void main(String[] args) {\n            System.out.println(matchValue(1, false, 36.0f));\n            System.out.println(matchValue(4, false, 36.0f));\n        }\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">public class</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">PatternMatching</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> static String </span><span style=\"color: #6F42C1\">matchValue</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">Object</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">val</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">boolean</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">isObstructed</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">float</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">powerPercentage</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #6F42C1\">switch </span><span style=\"color: #24292E\">(val.</span><span style=\"color: #6F42C1\">toString</span><span style=\"color: #24292E\">()) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                case </span><span style=\"color: #032F62\">&quot;1&quot;</span><span style=\"color: #D73A49\">:</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                    </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> (</span><span style=\"color: #D73A49\">!</span><span style=\"color: #24292E\">isObstructed) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                        </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;Move forward&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                    </span><span style=\"color: #D73A49\">break</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                case </span><span style=\"color: #032F62\">&quot;2&quot;</span><span style=\"color: #D73A49\">:</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                case </span><span style=\"color: #032F62\">&quot;3&quot;</span><span style=\"color: #D73A49\">:</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                    </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;Turn&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                case </span><span style=\"color: #032F62\">&quot;4&quot;</span><span style=\"color: #D73A49\">:</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                    </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> (powerPercentage </span><span style=\"color: #D73A49\">&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">25.0</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                        </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;Increase speed&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                    </span><span style=\"color: #D73A49\">break</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                case </span><span style=\"color: #032F62\">&quot;STOP&quot;</span><span style=\"color: #D73A49\">:</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                    </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;STOP&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                case </span><span style=\"color: #032F62\">&quot;ON&quot;</span><span style=\"color: #D73A49\">:</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                    </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;Switch ON&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                </span><span style=\"color: #D73A49\">default:</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                    </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;Invalid instruction&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;Invalid instruction&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> static void </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">String</span><span style=\"color: #24292E\">[] </span><span style=\"color: #E36209\">args</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            System.out.</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">matchValue</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">false</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">36.0</span><span style=\"color: #24292E\">f));</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            System.out.</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">matchValue</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">4</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">false</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">36.0</span><span style=\"color: #24292E\">f));</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"pattern-matching":{"frontmatter":{"title":"Pattern matching","description":"Pattern matching is a powerful feature in Ballerina that greatly enhances data-oriented programming by enabling concise and expressive handling of complex data structures. With pattern matching, developers can easily extract relevant data from intricate data patterns and perform targeted operations based on the structure and content of the data.","url":"","image":""},"content":"","code":""},"record-type-ballerina":{"frontmatter":{"title":"Ballerina","description":"","url":"","image":""},"content":"\n```\nimport ballerina/uuid;\n\ntype Customer record {|\n    string id = uuid:createType1AsString();\n    string name;\n|};\n\npublic function main() {\n    Customer customer = {name: \"John Doe\"};\n    io:println(string `Customer '${customer.name}' with id '${customer.id}' created successfully`);\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> ballerina/uuid;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Customer</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> {</span><span style=\"color: #D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> id </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> uuid</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">createType1AsString</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> name;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">|</span><span style=\"color: #24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    Customer customer </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {name</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;John Doe&quot;</span><span style=\"color: #24292E\">};</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">`Customer &#39;${</span><span style=\"color: #24292E\">customer</span><span style=\"color: #032F62\">.</span><span style=\"color: #24292E\">name</span><span style=\"color: #032F62\">}&#39; with id &#39;${</span><span style=\"color: #24292E\">customer</span><span style=\"color: #032F62\">.</span><span style=\"color: #24292E\">id</span><span style=\"color: #032F62\">}&#39; created successfully`</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"record-type-java":{"frontmatter":{"title":"Java","description":"","url":"","image":""},"content":"\n```\nimport java.util.UUID;\n\nrecord Customer(UUID id, String name) {\n    public Customer(String name) {\n        this(UUID.randomUUID(), name);\n    }\n}\n\npublic class RecordType {\n    public static void main(String[] args) {\n        Customer customer = new Customer(\"John Doe\");\n        System.out.printf(\"Customer '%s' with id '%s' created successfully\", customer.name(), customer.id());\n    }\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> java.util.UUID;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Customer</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">UUID</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">id</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">String</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">name</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Customer</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">String</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">name</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #6F42C1\">this</span><span style=\"color: #24292E\">(UUID.</span><span style=\"color: #6F42C1\">randomUUID</span><span style=\"color: #24292E\">(), </span><span style=\"color: #E36209\">name</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">public class</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">RecordType</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> static void </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">String</span><span style=\"color: #24292E\">[] </span><span style=\"color: #E36209\">args</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        Customer customer </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Customer</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;John Doe&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        System.out.</span><span style=\"color: #6F42C1\">printf</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Customer &#39;%s&#39; with id &#39;%s&#39; created successfully&quot;</span><span style=\"color: #24292E\">, customer.</span><span style=\"color: #6F42C1\">name</span><span style=\"color: #24292E\">(), customer.</span><span style=\"color: #6F42C1\">id</span><span style=\"color: #24292E\">());</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"record-type":{"frontmatter":{"title":"Record type","description":"Both Java and Ballerina offer a powerful mechanism known as the `record` to define data structures and enable efficient data manipulation. <br>In Java, the record class was introduced in Java 14, allowing developers to define immutable data classes with ease. On the other hand, Ballerina has had built-in support for records right from the start, providing a seamless way to define structured data types. <br>The use of records in both languages helps in separating code from data, allowing for more modular and maintainable programs.","url":"","image":""},"content":"","code":""},"smart-endpoints-ballerina":{"frontmatter":{"title":"Ballerina","description":"","url":"","image":""},"content":"```\nimport ballerina/http;\nimport ballerina/io;\n\ntype Album readonly & record {\n    string title;\n    string artist;\n};\n\npublic function main() returns error? {\n    // Creates a new client with the Basic REST service URL.\n    http:Client albumClient = check new (\"localhost:9090\");\n\n    // Binding the payload to a `record` array type.\n    // The contextually expected type is inferred from the LHS variable type.\n    Album[] albums = check albumClient->/albums;\n    io:println(\"First artist name: \" + albums[0].artist);\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> ballerina/http;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> ballerina/io;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Album</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">readonly</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">&amp;</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> title;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> artist;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error?</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Creates a new client with the Basic REST service URL.</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    http</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Client albumClient </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> (</span><span style=\"color: #032F62\">&quot;localhost:9090&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Binding the payload to a `record` array type.</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// The contextually expected type is inferred from the LHS variable type.</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    Album[] albums </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> albumClient</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #24292E\">albums;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;First artist name: &quot;</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">albums</span><span style=\"color: #24292E\">[</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">].artist);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"smart-endpoints-java":{"frontmatter":{"title":"Java","description":"","url":"","image":""},"content":"```\nimport org.springframework.http.HttpMethod;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.client.RestTemplate;\n\nrecord Album(String title, String artist) {};\n\npublic class SmartEndpoints {\n    public static void main(String[] args) {\n        RestTemplate restTemplate = new RestTemplate();\n\n        ResponseEntity<Album[]> response = restTemplate.exchange(\n                \"http://localhost:9090/albums\",\n                HttpMethod.GET,\n                null,\n                Album[].class\n        );\n\n        if (response.getStatusCode().is2xxSuccessful()) {\n            Album[] albums = response.getBody();\n            System.out.println(\"First artist name: \" + albums[0].artist());\n        } else {\n            System.out.println(\"Error occurred while invoking the endpoint.\");\n        }\n    }\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> org.springframework.http.HttpMethod;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> org.springframework.http.ResponseEntity;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> org.springframework.web.</span><span style=\"color: #D73A49\">client</span><span style=\"color: #24292E\">.RestTemplate;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Album</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">String</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">title</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">String</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">artist</span><span style=\"color: #24292E\">) {};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">public class</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">SmartEndpoints</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> static void </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">String</span><span style=\"color: #24292E\">[] </span><span style=\"color: #E36209\">args</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        RestTemplate restTemplate </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">RestTemplate</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">        ResponseEntity</span><span style=\"color: #D73A49\">&lt;</span><span style=\"color: #24292E\">Album[]</span><span style=\"color: #D73A49\">&gt;</span><span style=\"color: #24292E\"> response </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> restTemplate.</span><span style=\"color: #6F42C1\">exchange</span><span style=\"color: #24292E\">(</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                </span><span style=\"color: #032F62\">&quot;http://localhost:9090/albums&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                HttpMethod.GET,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                </span><span style=\"color: #D73A49\">null</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                </span><span style=\"color: #E36209\">Album</span><span style=\"color: #24292E\">[].class</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        );</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> (response.</span><span style=\"color: #6F42C1\">getStatusCode</span><span style=\"color: #24292E\">().</span><span style=\"color: #6F42C1\">is2xxSuccessful</span><span style=\"color: #24292E\">()) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            Album[] albums </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> response.</span><span style=\"color: #6F42C1\">getBody</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            System.out.</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;First artist name: &quot;</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">albums</span><span style=\"color: #24292E\">[</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">].</span><span style=\"color: #6F42C1\">artist</span><span style=\"color: #24292E\">());</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        } </span><span style=\"color: #D73A49\">else</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            System.out.</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Error occurred while invoking the endpoint.&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"smart-endpoints":{"frontmatter":{"title":"Smart endpoints","description":"Ballerina, designed for integration and orchestration, provides built-in support for smart endpoints. Smart endpoints in Ballerina are endpoints that can automatically handle protocol-specific data serialization and deserialization, content negotiation, error handling, and other common endpoint functionalities. By encapsulating these capabilities within the endpoint itself, Ballerina simplifies the development of data-oriented applications and promotes separation of concerns. <br>On the other hand, Java, particularly when using frameworks like Spring, also provides ways to create smart endpoints through annotations and abstractions to handle request mapping, data binding, and other endpoint-related tasks.","url":"","image":""},"content":"","code":""},"stream-type-ballerina":{"frontmatter":{"title":"Ballerina","description":"","url":"","image":""},"content":"```\nimport ballerina/io;\n\npublic function main() {\n    // Create a stream of integers\n    [1, 2, 3, 4, 5].toStream()\n    // Filter even numbers and map to their squares\n    .filter(x => x % 2 == 0).map(x => x * x)\n    // Consume the resulting stream and print the values\n    .forEach(x => io:println(x));\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> ballerina/io;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Create a stream of integers</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    [</span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">2</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">3</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">4</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">5</span><span style=\"color: #24292E\">].</span><span style=\"color: #6F42C1\">toStream</span><span style=\"color: #24292E\">()</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Filter even numbers and map to their squares</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    .</span><span style=\"color: #6F42C1\">filter</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">x</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">x</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">%</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">2</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">==</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">).</span><span style=\"color: #6F42C1\">map</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">x</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">x</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">*</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">x</span><span style=\"color: #24292E\">)</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Consume the resulting stream and print the values</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    .</span><span style=\"color: #6F42C1\">forEach</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">x</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">x</span><span style=\"color: #24292E\">));</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"stream-type-java":{"frontmatter":{"title":"Java","description":"","url":"","image":""},"content":"```\nimport java.util.Arrays;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a stream of integers\n        Arrays.stream(new int[]{1, 2, 3, 4, 5})\n                // Filter even numbers and map to their squares\n                .filter(x -> x % 2 == 0)\n                .map(x -> x * x)\n                // Consume the resulting stream and print the values\n                .forEach(System.out::println);\n    }\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> java.util.Arrays;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">public class</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Main</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> static void </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">String</span><span style=\"color: #24292E\">[] </span><span style=\"color: #E36209\">args</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #6A737D\">// Create a stream of integers</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        Arrays.</span><span style=\"color: #6F42C1\">stream</span><span style=\"color: #24292E\">(</span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">int</span><span style=\"color: #24292E\">[]{</span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">2</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">3</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">4</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">5</span><span style=\"color: #24292E\">})</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                </span><span style=\"color: #6A737D\">// Filter even numbers and map to their squares</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                .</span><span style=\"color: #6F42C1\">filter</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">x</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">-&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">x</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">%</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">2</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">==</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">)</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                .</span><span style=\"color: #6F42C1\">map</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">x</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">-&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">x</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">*</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">x</span><span style=\"color: #24292E\">)</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                </span><span style=\"color: #6A737D\">// Consume the resulting stream and print the values</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                .</span><span style=\"color: #6F42C1\">forEach</span><span style=\"color: #24292E\">(System.out</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">:println);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"stream-type":{"frontmatter":{"title":"Stream type","description":"Ballerina and Java provide powerful constructs for working with sequences of data through their stream types. Streams enhance data-oriented programming by enabling efficient and expressive manipulation of data in a streaming fashion resulting in cleaner, more maintainable code that is easier to understand and debug. This enhances the overall data-oriented programming experience.","url":"","image":""},"content":"","code":""},"table-type-ballerina":{"frontmatter":{"title":"Ballerina","description":"","url":"","image":""},"content":"```\nimport ballerina/io;\n\ntype Person record {|\n    readonly string name;\n    int age;\n|};\n\npublic function main() {\n    // Create a table to store a collection of Person records\n    table<Person> key(name) personTable = table [];\n\n    // Add records to the table\n    personTable.add({name: \"John\", age: 30});\n    personTable.add({name: \"Jane\", age: 25});\n\n    // Retrieve records from the table\n    Person john = personTable.get(\"John\");\n    Person jane = personTable.get(\"Jane\");\n\n    // Adding duplicate table key, throws KeyAlreadyExist error\n    // personTable.add({name: \"Jane\", age: 45});\n\n    // Putting duplicate table key, overrides the existing value\n    personTable.put({name: \"Jane\", age: 45});\n\n    // Print the retrieved records\n    io:println(john.name + \": \" + john.age.toString());\n    io:println(jane.name + \": \" + jane.age.toString());\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> ballerina/io;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Person</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> {</span><span style=\"color: #D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">readonly</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> name;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">int</span><span style=\"color: #24292E\"> age;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">|</span><span style=\"color: #24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Create a table to store a collection of Person records</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">table&lt;</span><span style=\"color: #24292E\">Person</span><span style=\"color: #D73A49\">&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">key</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">name</span><span style=\"color: #24292E\">) personTable </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">table</span><span style=\"color: #24292E\"> [];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Add records to the table</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    personTable.</span><span style=\"color: #6F42C1\">add</span><span style=\"color: #24292E\">({name</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;John&quot;</span><span style=\"color: #24292E\">, age</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">30</span><span style=\"color: #24292E\">});</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    personTable.</span><span style=\"color: #6F42C1\">add</span><span style=\"color: #24292E\">({name</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;Jane&quot;</span><span style=\"color: #24292E\">, age</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">25</span><span style=\"color: #24292E\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Retrieve records from the table</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    Person john </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> personTable.</span><span style=\"color: #6F42C1\">get</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;John&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    Person jane </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> personTable.</span><span style=\"color: #6F42C1\">get</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Jane&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Adding duplicate table key, throws KeyAlreadyExist error</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// personTable.add({name: &quot;Jane&quot;, age: 45});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Putting duplicate table key, overrides the existing value</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    personTable.</span><span style=\"color: #6F42C1\">put</span><span style=\"color: #24292E\">({name</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;Jane&quot;</span><span style=\"color: #24292E\">, age</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">45</span><span style=\"color: #24292E\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Print the retrieved records</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(john.name </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;: &quot;</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> john.age.</span><span style=\"color: #6F42C1\">toString</span><span style=\"color: #24292E\">());</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(jane.name </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;: &quot;</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> jane.age.</span><span style=\"color: #6F42C1\">toString</span><span style=\"color: #24292E\">());</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"table-type-java":{"frontmatter":{"title":"Java","description":"","url":"","image":""},"content":"```\nimport java.util.HashMap;\nimport java.util.Map;\n\nrecord Person(String name, int age) {};\n\npublic class TableType {\n        public static void main(String[] args) {\n            // Create a Map to store a collection of Person objects\n            Map<String, Person> personMap = new HashMap<>();\n\n            // Add objects to the map\n            personMap.put(\"John\", new Person(\"John\", 30));\n            personMap.put(\"Jane\", new Person(\"Jane\", 25));\n            \n            // Adding duplicate map key, overrides the existing value\n            personMap.put(\"Jane\", new Person(\"Jane\", 45));\n\n            // Retrieve objects from the map\n            Person john = personMap.get(\"John\");\n            Person jane = personMap.get(\"Jane\");\n\n            // Print the retrieved objects\n            System.out.println(john.name() + \": \" + john.age());\n            System.out.println(jane.name() + \": \" + jane.age());\n        }\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> java.util.HashMap;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> java.util.Map;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Person</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">String</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">name</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">int</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">age</span><span style=\"color: #24292E\">) {};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">public class</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">TableType</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> static void </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">String</span><span style=\"color: #24292E\">[] </span><span style=\"color: #E36209\">args</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #6A737D\">// Create a Map to store a collection of Person objects</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            Map</span><span style=\"color: #D73A49\">&lt;</span><span style=\"color: #24292E\">String, Person</span><span style=\"color: #D73A49\">&gt;</span><span style=\"color: #24292E\"> personMap </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> HashMap</span><span style=\"color: #D73A49\">&lt;&gt;</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #6A737D\">// Add objects to the map</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            personMap.</span><span style=\"color: #6F42C1\">put</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;John&quot;</span><span style=\"color: #24292E\">, </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">Person</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;John&quot;</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">30</span><span style=\"color: #24292E\">));</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            personMap.</span><span style=\"color: #6F42C1\">put</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Jane&quot;</span><span style=\"color: #24292E\">, </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">Person</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Jane&quot;</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">25</span><span style=\"color: #24292E\">));</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #6A737D\">// Adding duplicate map key, overrides the existing value</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            personMap.</span><span style=\"color: #6F42C1\">put</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Jane&quot;</span><span style=\"color: #24292E\">, </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">Person</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Jane&quot;</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">45</span><span style=\"color: #24292E\">));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #6A737D\">// Retrieve objects from the map</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            Person john </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> personMap.</span><span style=\"color: #6F42C1\">get</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;John&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            Person jane </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> personMap.</span><span style=\"color: #6F42C1\">get</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Jane&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #6A737D\">// Print the retrieved objects</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            System.out.</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(john.</span><span style=\"color: #6F42C1\">name</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;: &quot;</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> john.</span><span style=\"color: #6F42C1\">age</span><span style=\"color: #24292E\">());</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            System.out.</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(jane.</span><span style=\"color: #6F42C1\">name</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;: &quot;</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> jane.</span><span style=\"color: #6F42C1\">age</span><span style=\"color: #24292E\">());</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"table-type":{"frontmatter":{"title":"Table type","description":"Ballerina offers a compelling solution for separating code from data with its native support for the table type. The table type is specifically designed for storing and manipulating structured data. It allows you to define records as values and associate them with unique keys. In Java, the Map interface is used to store key-value pairs. <br> The key difference between Ballerina's table type and Java's Map is that the table type in Ballerina is specifically designed for structured data and has built-in support for record-based values.","url":"","image":""},"content":"","code":""},"type-annotation-n-inference-ballerina":{"frontmatter":{"title":"Ballerina","description":"","url":"","image":""},"content":"```\nimport ballerina/io;\n\ntype Employee record {|\n    string name;\n    int age;\n    string[] skills;\n|};\n\npublic function main() {\n    // Creates a variable explicitly stating the type\n    string[] skills = [\"Java\", \"Python\", \"SQL\"];\n\n    // Creates a variable using type inference\n    var employee = {\n        name: \"John Doe\",\n        age: 30,\n        skills\n    };\n\n    io:println(\"Name: \", employee.name);\n    io:println(\"Age: \", employee.age.toString());\n    io:println(\"Skills: \", employee.skills.toString());\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> ballerina/io;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Employee</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> {</span><span style=\"color: #D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> name;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">int</span><span style=\"color: #24292E\"> age;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\">[] skills;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">|</span><span style=\"color: #24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Creates a variable explicitly stating the type</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\">[] skills </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> [</span><span style=\"color: #032F62\">&quot;Java&quot;</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">&quot;Python&quot;</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">&quot;SQL&quot;</span><span style=\"color: #24292E\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Creates a variable using type inference</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">var</span><span style=\"color: #24292E\"> employee </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        name</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;John Doe&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        age</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">30</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        skills</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Name: &quot;</span><span style=\"color: #24292E\">, employee.name);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Age: &quot;</span><span style=\"color: #24292E\">, employee.age.</span><span style=\"color: #6F42C1\">toString</span><span style=\"color: #24292E\">());</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Skills: &quot;</span><span style=\"color: #24292E\">, employee.skills.</span><span style=\"color: #6F42C1\">toString</span><span style=\"color: #24292E\">());</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"type-annotation-n-inference-java":{"frontmatter":{"title":"Java","description":"","url":"","image":""},"content":"```\nrecord Employee(String name, int age, List<String> skills) {}\n\npublic class Main {\n    public static void main(String[] args) {\n        // Creates a variable explicitly stating the type\n        List<String> skills = Arrays.asList(\"Java\", \"Python\", \"SQL\");\n\n        // Creates a variable using type inference\n        var employee = new Employee(\"John Doe\", 30, skills);\n        \n        System.out.println(\"Name: \" + employee.getName());\n        System.out.println(\"Age: \" + employee.getAge());\n        System.out.println(\"Skills: \" + employee.getSkills());\n    }\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Employee</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">String</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">name</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">int</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">age</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">List</span><span style=\"color: #D73A49\">&lt;</span><span style=\"color: #E36209\">String</span><span style=\"color: #D73A49\">&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">skills</span><span style=\"color: #24292E\">) {}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">public class</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Main</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> static void </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">String</span><span style=\"color: #24292E\">[] </span><span style=\"color: #E36209\">args</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #6A737D\">// Creates a variable explicitly stating the type</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        List</span><span style=\"color: #D73A49\">&lt;</span><span style=\"color: #24292E\">String</span><span style=\"color: #D73A49\">&gt;</span><span style=\"color: #24292E\"> skills </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> Arrays.</span><span style=\"color: #6F42C1\">asList</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Java&quot;</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">&quot;Python&quot;</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">&quot;SQL&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #6A737D\">// Creates a variable using type inference</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #005CC5\">var</span><span style=\"color: #24292E\"> employee </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Employee</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;John Doe&quot;</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">30</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">skills</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        System.out.</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Name: &quot;</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> employee.</span><span style=\"color: #6F42C1\">getName</span><span style=\"color: #24292E\">());</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        System.out.</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Age: &quot;</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> employee.</span><span style=\"color: #6F42C1\">getAge</span><span style=\"color: #24292E\">());</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        System.out.</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Skills: &quot;</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> employee.</span><span style=\"color: #6F42C1\">getSkills</span><span style=\"color: #24292E\">());</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"type-annotation-n-inference":{"frontmatter":{"title":"Implicit and explicit typing","description":"Java and Ballerina supports both explicit typing and type inference. Explicit typing allows developers to specify the types of variables, function parameters, and return values explicitly. This clarity aids in understanding the expected data types and promotes data separation. Type inference, on the other hand, automatically infers types based on assigned values, reducing the need for explicit annotations and making the code more concise.","url":"","image":""},"content":"","code":""},"type-constraints-ballerina":{"frontmatter":{"title":"Ballerina","description":"","url":"","image":""},"content":"```\nimport ballerina/http;\nimport ballerina/constraint;\nimport ballerina/io;\n\ntype User record {\n    // Validate the username and password\n    @constraint:String {\n        minLength: 1,\n        maxLength: 8\n    }\n    string username;\n    @constraint:String {\n        pattern: re `^[\\S]{4,}$`\n    }\n    string password;\n};\n\nservice / on new http:Listener(9090) {\n    resource function post userSignUp(User user) returns http:Created {\n        io:println(string `User ${user.username} signed up successfully`);\n        return http:CREATED;\n    }\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> ballerina/http;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> ballerina/constraint;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> ballerina/io;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">User</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Validate the username and password</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    @</span><span style=\"color: #005CC5\">constraint</span><span style=\"color: #24292E\">:</span><span style=\"color: #005CC5\">String</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        minLength</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        maxLength</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">8</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> username;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    @</span><span style=\"color: #005CC5\">constraint</span><span style=\"color: #24292E\">:</span><span style=\"color: #005CC5\">String</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        pattern</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> re </span><span style=\"color: #032F62\">`^[</span><span style=\"color: #005CC5\">\\S</span><span style=\"color: #032F62\">]{4,}$`</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> password;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">service</span><span style=\"color: #24292E\"> / </span><span style=\"color: #D73A49\">on</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> http:Listener(</span><span style=\"color: #005CC5\">9090</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">resource</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">post</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">userSignUp</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">User</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">user</span><span style=\"color: #24292E\">) </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> http</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Created {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">`User ${</span><span style=\"color: #24292E\">user</span><span style=\"color: #032F62\">.</span><span style=\"color: #24292E\">username</span><span style=\"color: #032F62\">} signed up successfully`</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> http</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CREATED;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"type-constraints-java":{"frontmatter":{"title":"Java","description":"","url":"","image":""},"content":"```\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.Collections;\n\n@SpringBootApplication\n@RestController\npublic class Constraint {\n\n    private final ObjectMapper objectMapper = new ObjectMapper();\n\n    @PostMapping(\"/userSignUp\")\n    public String handleRequest(@RequestBody User user) {\n        return \"User \" + user.username + \" signed up successfully\";\n    }\n\n    public static void main(String[] args) {\n        SpringApplication app = new SpringApplication(Constraint.class);\n        app.setDefaultProperties(Collections.singletonMap(\"server.port\", \"8080\"));\n        app.run(args);\n    }\n\n    record User(String username, String password) {\n        User {\n            // Validate the username and password\n            if (!(username.length() > 1 && username.length() < 8 && password.matches(\"^[\\\\S]{4,}$\"))) {\n                throw new IllegalArgumentException(\"Username or Password is invalid\");\n            }\n        }\n    }\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> com.fasterxml.jackson.databind.ObjectMapper;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> org.springframework.boot.SpringApplication;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> org.springframework.boot.autoconfigure.SpringBootApplication;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> org.springframework.web.bind.</span><span style=\"color: #D73A49\">annotation</span><span style=\"color: #24292E\">.PostMapping;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> org.springframework.web.bind.</span><span style=\"color: #D73A49\">annotation</span><span style=\"color: #24292E\">.RequestBody;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> org.springframework.web.bind.</span><span style=\"color: #D73A49\">annotation</span><span style=\"color: #24292E\">.RestController;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> java.util.Collections;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">@</span><span style=\"color: #005CC5\">SpringBootApplication</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">@</span><span style=\"color: #005CC5\">RestController</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">public class</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Constraint</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">private</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">final</span><span style=\"color: #24292E\"> ObjectMapper objectMapper </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">ObjectMapper</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    @</span><span style=\"color: #6F42C1\">PostMapping</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;/userSignUp&quot;</span><span style=\"color: #24292E\">)</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> String </span><span style=\"color: #6F42C1\">handleRequest</span><span style=\"color: #24292E\">(@</span><span style=\"color: #005CC5\">RequestBody</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">User</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">user</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;User &quot;</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> user.username </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot; signed up successfully&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> static void </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">String</span><span style=\"color: #24292E\">[] </span><span style=\"color: #E36209\">args</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        SpringApplication app </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">SpringApplication</span><span style=\"color: #24292E\">(Constraint.class);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        app.</span><span style=\"color: #6F42C1\">setDefaultProperties</span><span style=\"color: #24292E\">(Collections.</span><span style=\"color: #6F42C1\">singletonMap</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;server.port&quot;</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">&quot;8080&quot;</span><span style=\"color: #24292E\">));</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        app.</span><span style=\"color: #6F42C1\">run</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">args</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">User</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">String</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">username</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">String</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">password</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        User {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #6A737D\">// Validate the username and password</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> (</span><span style=\"color: #D73A49\">!</span><span style=\"color: #24292E\">(username.</span><span style=\"color: #6F42C1\">length</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">&amp;&amp;</span><span style=\"color: #24292E\"> username.</span><span style=\"color: #6F42C1\">length</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">&lt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">8</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">&amp;&amp;</span><span style=\"color: #24292E\"> password.</span><span style=\"color: #6F42C1\">matches</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;^[</span><span style=\"color: #005CC5\">\\\\</span><span style=\"color: #032F62\">S]{4,}$&quot;</span><span style=\"color: #24292E\">))) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                throw </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">IllegalArgumentException</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Username or Password is invalid&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"type-constraints":{"frontmatter":{"title":"Type constraints","description":"Ballerina supports type constraints, allowing developers to specify additional constraints or validations on data types. Type constraints help enforce rules and requirements on data, promoting data integrity and separation. Developers can define constraints such as range checks, pattern validations, or custom validations.","url":"","image":""},"content":"","code":""},"union-types-ballerina":{"frontmatter":{"title":"Ballerina","description":"","url":"","image":""},"content":"```\nimport ballerina/io;\n\ntype Circle record {|\n   float radius;\n|};\n\ntype Rectangle record {|\n   float width;\n   float height;\n|};\n\ntype Shape Circle|Rectangle;\n\nfunction calculateArea (Shape shape) returns float {\n   if shape is Circle {\n       return float:PI * shape.radius * shape.radius;\n   }\n   return shape.width * shape.height;\n};\n\npublic function main() {\n   io:println(calculateArea({radius: 10}));\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> ballerina/io;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Circle</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> {</span><span style=\"color: #D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #005CC5\">float</span><span style=\"color: #24292E\"> radius;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">|</span><span style=\"color: #24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Rectangle</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> {</span><span style=\"color: #D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #005CC5\">float</span><span style=\"color: #24292E\"> width;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #005CC5\">float</span><span style=\"color: #24292E\"> height;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">|</span><span style=\"color: #24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Shape</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">Circle|Rectangle</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">calculateArea</span><span style=\"color: #24292E\"> (</span><span style=\"color: #E36209\">Shape</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">shape</span><span style=\"color: #24292E\">) </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">float</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> shape </span><span style=\"color: #D73A49\">is</span><span style=\"color: #24292E\"> Circle {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">       </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">float</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">PI * shape.radius * shape.radius;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> shape.width </span><span style=\"color: #D73A49\">*</span><span style=\"color: #24292E\"> shape.height;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">calculateArea</span><span style=\"color: #24292E\">({radius</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">10</span><span style=\"color: #24292E\">}));</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"union-types-java":{"frontmatter":{"title":"Java","description":"","url":"","image":""},"content":"```\nsealed interface Shape permits Circle, Rectangle {}\n\nrecord Circle(double radius) implements Shape {}\n\nrecord Rectangle(double width, double height) implements Shape {}\n\nclass Unions {\n    public static double calculateArea(Shape shape) {\n        switch (shape) {\n            case Circle circle:\n                return Math.PI * circle.radius() * circle.radius();\n            case Rectangle rectangle:\n                return rectangle.width() * rectangle.height();\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(calculateArea(new Circle(10)));\n    }\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #24292E\">sealed interface Shape permits Circle, Rectangle {}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Circle</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">double</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">radius</span><span style=\"color: #24292E\">) implements Shape {}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Rectangle</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">double</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">width</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">double</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">height</span><span style=\"color: #24292E\">) implements Shape {}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">class</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Unions</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> static double </span><span style=\"color: #6F42C1\">calculateArea</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">Shape</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">shape</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #6F42C1\">switch </span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">shape</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            case Circle circle</span><span style=\"color: #D73A49\">:</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> Math.PI </span><span style=\"color: #D73A49\">*</span><span style=\"color: #24292E\"> circle.</span><span style=\"color: #6F42C1\">radius</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">*</span><span style=\"color: #24292E\"> circle.</span><span style=\"color: #6F42C1\">radius</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            case Rectangle rectangle</span><span style=\"color: #D73A49\">:</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> rectangle.</span><span style=\"color: #6F42C1\">width</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">*</span><span style=\"color: #24292E\"> rectangle.</span><span style=\"color: #6F42C1\">height</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> static void </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">String</span><span style=\"color: #24292E\">[] </span><span style=\"color: #E36209\">args</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        System.out.</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">calculateArea</span><span style=\"color: #24292E\">(</span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">Circle</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">10</span><span style=\"color: #24292E\">)));</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"union-types":{"frontmatter":{"title":"Union types","description":"Union types enable developers to define data structures that can hold values of different types. This flexibility allows for the representation of diverse data formats within a unified structure. As a result, the separation of code from data becomes more pronounced, facilitating easier manipulation and processing of heterogeneous data. <br>By embracing union types, data-oriented programming achieves a higher level of abstraction, enabling seamless integration and efficient handling of diverse data formats.","url":"","image":""},"content":"","code":""}}},"__N_SSG":true}