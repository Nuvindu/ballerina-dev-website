{"pageProps":{"patterns":[{"tagline":"Add data to message","desc":"Content enricher adds data that was not sent by the original sender to message.","helps":"Ballerina enables additional lookups to enrich the message, such as database lookups, REST API calls, etc. Spread operator (...) helps to create new records out of existing records while enriching it with additional data.","tags":["Content Enricher","Message Channel","Message Endpoint"],"link":"https://www.enterpriseintegrationpatterns.com/patterns/messaging/DataEnricher.html","name":"Content Enricher"},{"tagline":"Remove data from message","desc":"The content filter removes data from the original message and can also be employed to simplify the message structure.","helps":"Ballerina excels at manipulating data, handling diverse formats, structures, and transformations. The query expression ('from' keyword) is useful for transforming messages. The 'select' clause, as shown below, can be used to create new records from existing ones while refining data. The 'where' clause can be used to filter items from an array.","tags":["Content Filter","Message Channel","Message Endpoint"],"link":"https://www.enterpriseintegrationpatterns.com/patterns/messaging/ContentFilter.html","name":"Content Filter"},{"tagline":"Transfer data to another application","desc":"The document message transfers data from one application to another. The focus is on the data and reliability, not on the timing of the transfer.","helps":"Ballerina support sending and receiving data in multiples formats such as JSON, XML over different protocols such as HTTP, GRPC, Kafka, etc. Depending on the protocol, Ballerina provides different reliability mechanisms. As an example, Ballerina HTTP client supports retries, load balancing and circuit breaking.","tags":["Document Message","Message Channel","Message Endpoint","Point-to-Point Channel","Request-Reply"],"link":"https://www.enterpriseintegrationpatterns.com/patterns/messaging/DocumentMessage.html","name":"Document Message"},{"tagline":"Route messages to different output channels","desc":"Message router consumes a message from one channel and republishes it to a different channel depending on a set of conditions.","helps":"Ballerina supports conditional logic with if-else and match statements. This can be used to route messages based on message content, header or any custom logic. Ballerina type system supports union types (eg: Country type below) which helps to define choices in a type safe and readable manner.","tags":["Message Router","Message Channel","Message Endpoint","Message"],"link":"https://www.enterpriseintegrationpatterns.com/patterns/messaging/MessageRouter.html","name":"Message Router"},{"tagline":"Connect messaging systems","desc":"Massaging bridge connects multiple messaging systems by mapping channels and transforming message formats.","helps":"Single Ballerina program can connect to multiple messaging systems. Each system may utilize different protocols and message formats. Protocols such as HTTP, GRPC, Kafka, JDBC, ect are supported via Ballerina's rich set of stranded libraries. JSON and XML are supported at type system level. Other formats such as CSV, EDI are supported via libraries.","tags":["Messaging Bridge","Message Channel","Message Endpoint","Channel Adapter","Message"],"link":"https://www.enterpriseintegrationpatterns.com/patterns/messaging/MessagingBridge.html","name":"Messaging Bridge"},{"tagline":"Process messages with different formats","desc":"Normalizer routes each message type through a custom message translator so that the resulting messages match a common format.","helps":"Ballerina's type test (is keyword) and match statement can both be used to test the structure of incoming data. Then the data can be transformed to required format constructing new data structures. Ballerina's data oriented design helps with complex transformations with features such as destructuring, query expressions, spread operator, etc.","tags":["Normalizer","Message Channel","Message Endpoint","Message Translator","Message Router","Message"],"link":"https://www.enterpriseintegrationpatterns.com/patterns/messaging/Normalizer.html","name":"Normalizer"},{"tagline":"Send messages to multiple recipients and re-aggregate the responses","desc":"Scatter gather broadcasts a message to multiple recipients and re-aggregates the responses back into a single message.","helps":"Ballerina has a light-weight concurrency model with builtin syntax support. This helps to send messages parallelly and to wait on aggregation. Query expressions are convenient for transform/order/filter the aggregated data.","tags":["Scatter Gather","Aggregator","Message Channel","Message Endpoint","Message Router","Message"],"link":"https://www.enterpriseintegrationpatterns.com/patterns/messaging/BroadcastAggregate.html","name":"Scatter Gather"}]},"__N_SSG":true}