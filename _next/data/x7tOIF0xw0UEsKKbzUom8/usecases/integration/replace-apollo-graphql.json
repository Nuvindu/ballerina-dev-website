{"pageProps":{"samples":{"better-security":{"frontmatter":{"title":"Better security","description":"Ballerina provides robust security features such as encryption, authentication, and authorization, which are essential for businesses dealing with sensitive data.","url":"","image":""},"content":"```\nlistener graphql:Listener securedEP = new (9090,\n    secureSocket = {\n        key: {\n            certFile: \"../resource/path/to/public.crt\",\n            keyFile: \"../resource/path/to/private.key\"\n        }\n    }\n);\n\n@graphql:ServiceConfig {\n    auth: [\n        {\n            oauth2IntrospectionConfig: {\n                url: \"https://mytoken.endpoint/oauth2/introspect\",\n                tokenTypeHint: \"access_token\",\n                scopeKey: \"scp\",\n                clientConfig: {\n                    customHeaders: {\"Authorization\": \"Basic YWRtaW46YWRtaW4=\"},\n                    secureSocket: {\n                        cert: \"../resource/path/to/public.crt\"\n                    }\n                }\n            },\n            scopes: [\"admin\"]\n        }\n    ]\n}\nservice /graphql on securedEP {\n    resource function get greeting() returns string {\n        return \"Hello, World!\";\n    }\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">listener</span><span style=\"color: #24292E\"> graphql</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Listener securedEP </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> (</span><span style=\"color: #005CC5\">9090</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #E36209\">secureSocket</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">key:</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            certFile</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;../resource/path/to/public.crt&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            keyFile</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;../resource/path/to/private.key&quot;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">@</span><span style=\"color: #005CC5\">graphql</span><span style=\"color: #24292E\">:</span><span style=\"color: #005CC5\">ServiceConfig</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    auth</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> [</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #6F42C1\">oauth2IntrospectionConfig</span><span style=\"color: #24292E\">: {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                </span><span style=\"color: #6F42C1\">url</span><span style=\"color: #24292E\">: </span><span style=\"color: #032F62\">&quot;https://mytoken.endpoint/oauth2/introspect&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                </span><span style=\"color: #6F42C1\">tokenTypeHint</span><span style=\"color: #24292E\">: </span><span style=\"color: #032F62\">&quot;access_token&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                </span><span style=\"color: #6F42C1\">scopeKey</span><span style=\"color: #24292E\">: </span><span style=\"color: #032F62\">&quot;scp&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                </span><span style=\"color: #6F42C1\">clientConfig</span><span style=\"color: #24292E\">: {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                    </span><span style=\"color: #6F42C1\">customHeaders</span><span style=\"color: #24292E\">: {</span><span style=\"color: #032F62\">&quot;Authorization&quot;</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;Basic YWRtaW46YWRtaW4=&quot;</span><span style=\"color: #24292E\">},</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                    </span><span style=\"color: #6F42C1\">secureSocket</span><span style=\"color: #24292E\">: {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                        </span><span style=\"color: #6F42C1\">cert</span><span style=\"color: #24292E\">: </span><span style=\"color: #032F62\">&quot;../resource/path/to/public.crt&quot;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            },</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #6F42C1\">scopes</span><span style=\"color: #24292E\">: [</span><span style=\"color: #032F62\">&quot;admin&quot;</span><span style=\"color: #24292E\">]</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    ]</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">service</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">/graphql</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">on</span><span style=\"color: #24292E\"> securedEP {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">resource</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">get</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">greeting</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;Hello, World!&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"clean-and-simple-code-apollo":{"frontmatter":{"title":"Apollo","description":"","url":"","image":""},"content":"\n```\nimport { ApolloServer } from '@apollo/server';\nimport { startStandaloneServer } from '@apollo/server/standalone';\n\nconst typeDefs = `\n  type Query {\n    hello: String\n  }\n`;\n\nconst resolvers = {\n  Query: {\n    hello: () => 'Hello, World!'\n  }\n};\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n});\n\nconst { url } = await startStandaloneServer(server, {\n  listen: { port: 4000 },\n});\n\nconsole.log(`🚀  Server ready at: ${url}`);\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { ApolloServer } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> &#39;@apollo/server&#39;;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { startStandaloneServer } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> &#39;@apollo/server/standalone&#39;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const </span><span style=\"color: #005CC5\">typeDefs</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">`</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">  type Query {</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">    hello: String</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">  }</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">`</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const </span><span style=\"color: #005CC5\">resolvers</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  Query</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    hello</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> () </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> &#39;Hello, World</span><span style=\"color: #D73A49\">!</span><span style=\"color: #24292E\">&#39;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">const server = new ApolloServer({</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  typeDefs,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  resolvers,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">const { url } = await startStandaloneServer(server, {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  listen</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> { port: </span><span style=\"color: #005CC5\">4000</span><span style=\"color: #24292E\"> },</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">console.</span><span style=\"color: #6F42C1\">log</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">`🚀  Server ready at: ${</span><span style=\"color: #24292E\">url</span><span style=\"color: #032F62\">}`</span><span style=\"color: #24292E\">);</span></span></code></pre>"},"clean-and-simple-code-ballerina":{"frontmatter":{"title":"Ballerina","description":"","url":"","image":""},"content":"\n```\nimport ballerina/graphql;\nimport ballerina/io;\n\nservice on new graphql:Listener(9090) {\n    function init() {\n        io:println(“💃 Server started at http://localhost:9090”);\n    }\n\n    resource function get hello() returns string {\n        return \"Hello, World!\";\n    }\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> ballerina/graphql;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> ballerina/io;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">service</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">on</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> graphql:Listener(</span><span style=\"color: #005CC5\">9090</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">init</span><span style=\"color: #24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(“💃 </span><span style=\"color: #E36209\">Server</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">started</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">at</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">http</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6A737D\">//localhost:9090”);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #E36209\">resource</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">get</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">hello</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;Hello, World!&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"clean-and-simple-code":{"frontmatter":{"title":"Clean and simple code","description":"Ballerina provides a simple and clean way to write GraphQL services with fewer lines of code compared to Apollo. Its concise syntax and built-in features allow for a streamlined development, resulting in more efficient and maintainable GraphQL services. Ballerina's focus on simplicity helps developers achieve their goals with ease and clarity.","url":"","image":""},"content":"","code":""},"cli-tool":{"frontmatter":{"title":"GraphQL CLI tool - An all-in-one tool for GraphQL","description":"Experience the exhilaration of the Ballerina GraphQL CLI tool. Effortlessly generate custom GraphQL clients from schemas, accessing endpoints with ease. Seamlessly generate and share Ballerina GraphQL service schemas, facilitating collaboration and empowering efficient development workflows.","url":"","image":"images/usecases/integration/apollo-graphql/graphql-cli-tool.png"},"content":"\n","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"></span></code></pre>"},"code-first-ballerina":{"frontmatter":{"title":"Ballerina code","description":"","url":"","image":""},"content":"\n```ballerina\nimport ballerina/graphql;\n\nservice on new graphql:Listener(9090) {\n   resource function get profile() returns Profile {\n       return {\n           name: \"John Doe\",\n           age: 30\n       };\n   }\n}\n\ntype Profile record {|\n   string name;\n   int age;\n|};\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> ballerina/graphql;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">service</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">on</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> graphql:Listener(</span><span style=\"color: #005CC5\">9090</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #D73A49\">resource</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">get</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">profile</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> Profile {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">       </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">           name</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;John Doe&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">           age</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">30</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">       };</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Profile</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> {</span><span style=\"color: #D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> name;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #005CC5\">int</span><span style=\"color: #24292E\"> age;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">|</span><span style=\"color: #24292E\">};</span></span></code></pre>"},"code-first-graphql":{"frontmatter":{"title":"Generated schema","description":"","url":"","image":""},"content":"\n```graphql\ntype Query {\n   profile: Profile!\n}\n\n\ntype Profile {\n   name: String!\n   age: Int!\n}\n```\n","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">Query</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #E36209\">profile</span><span style=\"color: #24292E\">: </span><span style=\"color: #005CC5\">Profile</span><span style=\"color: #D73A49\">!</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">Profile</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #E36209\">name</span><span style=\"color: #24292E\">: </span><span style=\"color: #005CC5\">String</span><span style=\"color: #D73A49\">!</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #E36209\">age</span><span style=\"color: #24292E\">: </span><span style=\"color: #005CC5\">Int</span><span style=\"color: #D73A49\">!</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"code-first":{"frontmatter":{"title":"Ballerina is code-first","description":"Ballerina GraphQL's code-first approach eliminates the need for a predefined schema. With a syntax similar to GraphQL, developers can define the schema and resolvers directly in code, enabling automatic schema generation. This streamlines development, enhances productivity, and offers flexibility in building efficient and self-contained GraphQL services.","url":"","image":""},"content":"","code":""},"community-driven-development":{"frontmatter":{"title":"Community-driven development","description":"Ballerina is a community-driven open-source project with contributions from developers around the world. This means that developers have access to a rich ecosystem of libraries, tools, and resources that can enhance their automation workflows.","url":"","image":"images/usecases/integration/community-driven-development.png"},"content":"","code":""},"connect-with-anything":{"frontmatter":{"title":"Connect with anything","description":"Access thousands of connectors for HTTP APIs (OpenAPI), event APIs (AsyncAPI), GraphQL services, legacy systems, and data stores, allowing seamless data transfer to and from any system, anywhere.","url":"","image":"images/usecases/integration/connect-with-anything.png"},"content":"","code":""},"designer-tool":{"frontmatter":{"title":"Built-in designer tool for GraphQL","description":"Explore the boundless possibilities with the in-built GraphQL API designer, a visual tool in the Ballerina VS Code plugin. Effortlessly design and prototype GraphQL APIs, unlocking a seamless and intuitive development experience. Empower your GraphQL services with this exceptional visual designer tool.","url":"https://wso2.com/ballerina/vscode/docs/visual-programming/graphql-designer/","image":"images/usecases/integration/apollo-graphql/graphql-diagram-editor.png"},"content":"","code":""},"diagram-when-you-need":{"frontmatter":{"title":"Diagram when you need it, Code when you don't","description":"Ballerina diagrams provide great creativity and flexibility in the early stages of development, allowing developers to visualize and iterate on their ideas quickly. However, developers can easily switch to writing code when delivering a more polished product and take advantage of Ballerina's powerful language features.","url":"","image":"images/usecases/integration/diagram-when-you-need-it.png"},"content":"","code":""},"git-based-workflow":{"frontmatter":{"title":"Your typical Git-based workflow: edit, debug, test in VSCode","description":"Ballerina provides built-in editing, debugging, and testing tools, making it easier for developers to test, debug, deploy, and optimize their automation workflows.","url":"","image":"images/usecases/integration/edit-debug-diagram.png"},"content":"","code":""},"similarities-default-values-ballerina":{"frontmatter":{"title":"Default values","description":"Ballerina has in-built default value support, similar to GraphQL.","url":"","image":""},"content":"```\nresource function get greeting(string name = \"Anonymous\") returns string;\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">resource</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">get</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">greeting</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">name</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;Anonymous&quot;</span><span style=\"color: #24292E\">) </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\">;</span></span></code></pre>"},"similarities-default-values-graphql":{"frontmatter":{"title":"","description":"","url":"","image":""},"content":"```graphql\ngreeting(name: String! = \"Anonymous\"): String!\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6F42C1\">greeting</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">name</span><span style=\"color: #24292E\">: </span><span style=\"color: #005CC5\">String</span><span style=\"color: #D73A49\">!</span><span style=\"color: #24292E\"> = </span><span style=\"color: #032F62\">&quot;Anonymous&quot;</span><span style=\"color: #24292E\">): </span><span style=\"color: #6F42C1\">String</span><span style=\"color: #24292E\">!</span></span></code></pre>"},"similarities-nullability-ballerina":{"frontmatter":{"title":"Nullability","description":"Ballerina supports nullable types similar to GraphQL.","url":"","image":""},"content":"```ballerina\ntype Person record {|\n   string? name;\n|};\n```\n","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Person</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> {</span><span style=\"color: #D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\">? name;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">|</span><span style=\"color: #24292E\">};</span></span></code></pre>"},"similarities-nullability-graphql":{"frontmatter":{"title":"","description":"","url":"","image":""},"content":"```graphql\ntype Profile {\n   name: String\n}\n```\n","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">Profile</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #E36209\">name</span><span style=\"color: #24292E\">: </span><span style=\"color: #005CC5\">String</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"similarities-object-types-ballerina":{"frontmatter":{"title":"Object types","description":"Using Ballerina record types is very much similar to GraphQL object definitions.","url":"","image":""},"content":"```ballerina\ntype Person record {|\n   string name;\n   int age;\n|};\n```\n","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Person</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> {</span><span style=\"color: #D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> name;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #005CC5\">int</span><span style=\"color: #24292E\"> age;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">|</span><span style=\"color: #24292E\">};</span></span></code></pre>"},"similarities-object-types-graphql":{"frontmatter":{"title":"","description":"","url":"","image":""},"content":"```graphql\ntype Profile {\n   name: String!\n   age: Int!\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">Profile</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #E36209\">name</span><span style=\"color: #24292E\">: </span><span style=\"color: #005CC5\">String</span><span style=\"color: #D73A49\">!</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #E36209\">age</span><span style=\"color: #24292E\">: </span><span style=\"color: #005CC5\">Int</span><span style=\"color: #D73A49\">!</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"similarities-union-types-ballerina":{"frontmatter":{"title":"Union types","description":"Ballerina supports union types similar to GraphQL union types.","url":"","image":""},"content":"```ballerina\ntype SearchResult Human|Droid;\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">SearchResult</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">Human|Droid</span><span style=\"color: #24292E\">;</span></span></code></pre>"},"similarities-union-types-graphql":{"frontmatter":{"title":"","description":"","url":"","image":""},"content":"```graphql\nunion SearchResult = Human | Droid\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">union</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">SearchResult</span><span style=\"color: #24292E\"> = </span><span style=\"color: #005CC5\">Human</span><span style=\"color: #24292E\"> | </span><span style=\"color: #005CC5\">Droid</span></span></code></pre>"},"similarities":{"frontmatter":{"title":"Ballerina is GraphQL - GraphQL is Ballerina","description":"Ballerina, a strongly-typed language, is perfectly suited for GraphQL's declarative data fetching. With compile-time error handling, Ballerina ensures reliability and efficiency, making it an excellent choice for building robust and user-friendly GraphQL APIs. Ballerina is the perfect choice for developers who want to build reliable, efficient, and easy-to-use GraphQL APIs. The similarities between the Ballerina and GraphQL syntax are astonishing.","url":"","image":""},"content":"","code":""},"subscription-support":{"frontmatter":{"title":"Out-of-the-box subscription support - No additional libraries are needed","description":"Ballerina offers seamless support for GraphQL subscriptions out-of-the-box, eliminating the need for additional libraries like with Apollo. With Ballerina, you can effortlessly integrate systems like Apache Kafka into your GraphQL subscriptions, enhancing real-time data streaming capabilities. This simplifies development, reduces dependencies, and provides a comprehensive solution for building robust GraphQL subscription-based applications.","url":"https://github.com/ballerina-platform/module-ballerina-graphql/tree/master/examples/news_alerts","image":""},"content":"\n```\nservice /news on new graphql:Listener(9090) {\n    remote function publish(NewsUpdate & readonly update) returns NewsRecord|error {\n        if publisherTable.hasKey(update.publisherId) {\n            return produceNews(update).cloneReadOnly();\n        }\n        return error(\"Invalid publisher\");\n    }\n\n    resource function subscribe news(string userId, Agency agency) returns stream<News>|error {\n        stream<News> newsStream;\n        if userTable.hasKey(userId) {\n            NewsStream newsStreamGenerator = check new (userId, agency);\n            newsStream = new (newsStreamGenerator);\n            return newsStream;\n        }\n        return error(\"User not registered\");\n    }\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">service</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">/news</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">on</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> graphql:Listener(</span><span style=\"color: #005CC5\">9090</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">remote</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">publish</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">NewsUpdate</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">&amp;</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">readonly</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">update</span><span style=\"color: #24292E\">) </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> NewsRecord</span><span style=\"color: #D73A49\">|error</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> publisherTable.</span><span style=\"color: #6F42C1\">hasKey</span><span style=\"color: #24292E\">(update.publisherId) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">produceNews</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">update</span><span style=\"color: #24292E\">).</span><span style=\"color: #6F42C1\">cloneReadOnly</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Invalid publisher&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">resource</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">subscribe</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">news</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">userId</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">Agency</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">agency</span><span style=\"color: #24292E\">) </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">stream&lt;</span><span style=\"color: #24292E\">News</span><span style=\"color: #D73A49\">&gt;|error</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">stream&lt;</span><span style=\"color: #24292E\">News</span><span style=\"color: #D73A49\">&gt;</span><span style=\"color: #24292E\"> newsStream;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> userTable.</span><span style=\"color: #6F42C1\">hasKey</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">userId</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            NewsStream newsStreamGenerator </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> (</span><span style=\"color: #E36209\">userId</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">agency</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            newsStream </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> (</span><span style=\"color: #E36209\">newsStreamGenerator</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> newsStream;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;User not registered&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"trivial-hosting-in-wso2-choreo-ipaas":{"frontmatter":{"title":"(Extra!) Trivial hosting in WSO2 Choreo iPaaS","description":"Manual integrations? Scheduled integrations (cron jobs)? Triggered integrations? Integrations as APIs? No problem! Write the code, attach the repo to WSO2 Choreo, and let it do the rest.","url":"https://wso2.com/choreo/ipaas/","image":"images/choreo-ipaas-image-v2.png"},"content":"","code":""}}},"__N_SSG":true}