{"pageProps":{"samples":{"ballerina-with-graalvm":{"frontmatter":{"title":"Ballerina and GraalVM fuel microservices with lightning-fast performance","description":"With this duo, your microservices will reach new heights of efficiency and responsiveness, leaving competitors in the dust. Ballerina's seamless integration with GraalVM harnesses the power of just-in-time compilation and native image generation, resulting in optimized execution and unparalleled performance. Stay ahead of the game with Ballerina and GraalVM, and experience microservices performance like never before.","url":"https://ballerina.io/learn/build-a-native-executable/","image":"images/graalvm-ballerina.png"},"code":""},"bottom-up-top-down":{"frontmatter":{"title":"Blend of top-down and bottom-up development","description":"Ballerina revolutionizes microservices development by offering unparalleled support for both top-down and bottom-up approaches. Developers can effortlessly design their microservices architecture with Ballerina's intuitive syntax and design tools, allowing for clear architectural vision and easier collaboration. Alternatively, they can build individual microservices with precision and speed, seamlessly integrating them into a cohesive architecture.","url":"https://wso2.com/ballerina/vscode/docs/visual-programming/architecture-view/architecture-diagram/","image":"images/architecture-view.png"},"code":""},"designed-for-failure":{"frontmatter":{"title":"Designed for failure","description":"By incorporating proven patterns and best practices, Ballerina equips you with the tools to proactively address failure scenarios, ensuring system stability and minimizing downtime and offering a revolutionary approach to microservices development that is inherently `designed for failure` with its built-in fault-tolerance mechanisms and circuit-breaking capabilities.","url":"https://ballerina.io/learn/by-example/http-circuit-breaker/","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Album</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">readonly</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">&amp;</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> title;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> artist;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error?</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    http</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Client albumClient </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> (</span><span style=\"color: #032F62\">&quot;localhost:9090&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #E36209\">circuitBreaker</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #6A737D\">// The failure calculation window measures how long the circuit breaker keeps the</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #6A737D\">// statistics for the operations.</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            rollingWindow</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                </span><span style=\"color: #6A737D\">// The period is in seconds for which the failure threshold is calculated.</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                timeWindow</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">10</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                </span><span style=\"color: #6A737D\">// The granularity (in seconds) at which the time window slides.</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                </span><span style=\"color: #6A737D\">// The rolling window is divided into buckets and slides by these increments.</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                bucketSize</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">2</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                </span><span style=\"color: #6A737D\">// The minimum number of requests in the rolling window that trips the circuit.</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                requestVolumeThreshold</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">0</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            },</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #6A737D\">// The threshold for request failures. When this threshold exceeds, the circuit trips.</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #6A737D\">// This is the ratio between failures and total requests. The ratio is calculated using</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #6A737D\">// the requests received within the given rolling window.</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #E36209\">failureThreshold</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">0.2</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #6A737D\">// The period (in seconds) to wait before attempting to make another request to the upstream service.</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #E36209\">resetTime</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">10</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #6A737D\">// HTTP response status codes that are considered as failures</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #E36209\">statusCodes</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> [</span><span style=\"color: #005CC5\">400</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">404</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">500</span><span style=\"color: #24292E\">]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    );</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    Album[] payload </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> albumClient</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #24292E\">albums;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">payload</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"devops-agility":{"frontmatter":{"title":"Accelerating DevOps agility","description":"Ballerina promotes DevOps practices by offering seamless integration with popular container platforms like Docker and Kubernetes. It supports containerization and provides native support for deployment on container orchestration platforms, facilitating efficient scaling and management of microservices.","url":"https://github.com/ballerina-platform/ballerina-distribution/blob/v2201.5.0/examples/c2c-k8s-deployment/Cloud.toml","image":"images/devops-agility.png"},"code":""},"http2-native":{"frontmatter":{"title":"Ballerina's native HTTP/2 support","description":"Revolutionize your microservices architecture with Ballerina's cutting-edge native support for HTTP/2. Say goodbye to latency and embrace lightning-fast communication between your services through the power of multiplexing. Experience optimal resource utilization and bandwidth efficiency with advanced features such as server push and stream prioritization.","url":"","image":""},"code":""},"integration-capabilities":{"frontmatter":{"title":"Powerful integration capabilities","description":"Unlocking the power of seamless integration, Ballerina shines with its exceptional capability to connect and interact with a vast array of external systems and services. With an extensive range of connectors at its disposal, Ballerina effortlessly integrates with databases, message brokers, web services, and more.","url":"https://ballerina.io/learn/by-example/kafka-service-consume-message/","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Order</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">readonly</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">&amp;</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">int</span><span style=\"color: #24292E\"> orderId;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> productName;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">decimal</span><span style=\"color: #24292E\"> price;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">boolean</span><span style=\"color: #24292E\"> isValid;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">listener</span><span style=\"color: #24292E\"> kafka</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Listener orderListener </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> (</span><span style=\"color: #E36209\">kafka</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">DEFAULT_URL, {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    groupId</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;order-group-id&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    topics</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;order-topic&quot;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">service</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">on</span><span style=\"color: #24292E\"> orderListener {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">remote</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">onConsumerRecord</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">Order</span><span style=\"color: #24292E\">[] </span><span style=\"color: #E36209\">orders</span><span style=\"color: #24292E\">) </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error?</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #6A737D\">// The set of orders received by the service are processed one by one.</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> Order &#39;order </span><span style=\"color: #D73A49\">in</span><span style=\"color: #24292E\"> orders</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">where</span><span style=\"color: #24292E\"> &#39;order.isValid</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">do</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                log</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">printInfo</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">`Received valid order for ${</span><span style=\"color: #24292E\">&#39;order</span><span style=\"color: #032F62\">.</span><span style=\"color: #24292E\">productName</span><span style=\"color: #032F62\">}`</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            };</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"msa-tracing":{"frontmatter":{"title":"Ballerina enables seamless monitoring of microservices","description":"Ballerina's tracing capabilities go beyond basic monitoring. With seamless integration with popular tracing frameworks like Jaeger and OpenTelemetry, developers can effortlessly instrument their microservices with tracing spans, enabling end-to-end tracing and analysis of complex transaction flows.","url":"https://ballerina.io/learn/observe-ballerina-programs/","image":"images/screenshots-collage-final-image-transparent-v5.png"},"code":""},"network-awareness":{"frontmatter":{"title":"Network-awareness for seamless integration","description":"Microservices communicate extensively over networks, making integration a crucial aspect of their design. Ballerina shines in this area with its built-in network awareness. It seamlessly integrates with various protocols (HTTP, gRPC, and more) and data formats (JSON, XML) commonly used in microservices architectures.","url":"https://github.com/ballerina-guides/integration-samples/blob/main/graphql_bookstore_service/main.bal","image":"images/network-awareness.png"},"code":""},"purposefully-built":{"frontmatter":{"title":"Purposefully designed for microservices","description":"Ballerina is tailor-made to excel in the realm of distributed systems. Every aspect of Ballerina, from its syntax to its constructs and abstractions, is meticulously crafted to simplify the development, deployment, and management of microservices.","url":"https://github.com/ballerina-guides/integration-samples/tree/main/restful_api/main.bal","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">configurable</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">int</span><span style=\"color: #24292E\"> port </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">8080</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Album</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">readonly</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">&amp;</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> {</span><span style=\"color: #D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> id;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> title;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> artist;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">decimal</span><span style=\"color: #24292E\"> price;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">|</span><span style=\"color: #24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">service</span><span style=\"color: #24292E\"> / </span><span style=\"color: #D73A49\">on</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> http:Listener(</span><span style=\"color: #E36209\">port</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">resource</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">get</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">albums</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> Album[] {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> albums.</span><span style=\"color: #6F42C1\">toArray</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">resource</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">get</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">albums</span><span style=\"color: #24292E\">/[</span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">id</span><span style=\"color: #24292E\">]() </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> Album</span><span style=\"color: #D73A49\">|</span><span style=\"color: #24292E\">http</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">NotFound {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        Album</span><span style=\"color: #D73A49\">?</span><span style=\"color: #24292E\"> album </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> albums[id];</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> album </span><span style=\"color: #D73A49\">is</span><span style=\"color: #24292E\"> () {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> http</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">NOT_FOUND;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        } </span><span style=\"color: #D73A49\">else</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> album;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">resource</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">post</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">albums</span><span style=\"color: #24292E\">(@</span><span style=\"color: #005CC5\">http</span><span style=\"color: #24292E\">:</span><span style=\"color: #005CC5\">Payload</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">Album</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">album</span><span style=\"color: #24292E\">) </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> Album {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        albums.</span><span style=\"color: #6F42C1\">add</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">album</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> album;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"smart-endpoints":{"frontmatter":{"title":"Smart endpoints, dumb pipes","description":"Ballerina enables developers to create smart endpoints that encapsulate business logic and functionality, making them capable of understanding and processing specific types of data. This allows for precise control and manipulation of the data flowing through the microservices, while keeping the communication infrastructure(the pipe or the protocol) simple and agnostic to the data being processed.","url":"https://github.com/ballerina-guides/integration-samples/blob/main/graphql_bookstore_service/main.bal","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">service class</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Book</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">private</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">final</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">readonly</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">&amp;</span><span style=\"color: #24292E\"> BookData bookData;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">init</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">BookData</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">bookData</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #005CC5\">self</span><span style=\"color: #24292E\">.bookData </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> bookData.</span><span style=\"color: #6F42C1\">cloneReadOnly</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// resource functions represents smart endpoints</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">resource</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">get</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">reviews</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> Review</span><span style=\"color: #D73A49\">|error</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> isbn </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">self</span><span style=\"color: #24292E\">.bookData.isbn;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        GoogleBook googleBook </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> bookEp</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #24292E\">books</span><span style=\"color: #D73A49\">/</span><span style=\"color: #24292E\">v1</span><span style=\"color: #D73A49\">/</span><span style=\"color: #24292E\">volumes.</span><span style=\"color: #6F42C1\">get</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">q</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">`isbn:${</span><span style=\"color: #24292E\">isbn</span><span style=\"color: #032F62\">}`</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">let</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">var</span><span style=\"color: #24292E\"> volInfo </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> googleBook.items[</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">].volumeInfo </span><span style=\"color: #D73A49\">in</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                averageRating</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> volInfo.averageRating,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                ratingsCount</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> volInfo.ratingsCount,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                maturityRating</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> volInfo.maturityRating</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            };</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"test-framework":{"frontmatter":{"title":"Harnessing Ballerina's test framework for success","description":"Ballerina's test framework is a powerful asset for microservices development, ensuring top-notch quality and reliability. With support for unit, integration, and functional testing, developers can cover all critical aspects of their microservices. The framework seamlessly integrates with Ballerina, eliminating complexity and enabling easy execution within the development environment.","url":"https://ballerina.io/learn/by-example/testerina-mocking-objects/","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6A737D\">// Sends an email to the specified email addresses</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// and returns an error if found.</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">sendNotification</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\">[] </span><span style=\"color: #E36209\">emailIds</span><span style=\"color: #24292E\">) </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error?</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    email</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Message msg </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        &#39;from</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;builder@abc.com&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        subject</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;Error Alert ...&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        to</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> emailIds,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        body</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;&quot;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    };</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> smtpClient </span><span style=\"color: #D73A49\">-&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">sendMessage</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">msg</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">@</span><span style=\"color: #005CC5\">test</span><span style=\"color: #24292E\">:</span><span style=\"color: #005CC5\">Config</span><span style=\"color: #24292E\"> { }</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">testSendNotification</span><span style=\"color: #24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    smtpClient </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> test</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">mock</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">email</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">SmtpClient);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Stubs the `send` method of the `mockSmtpClient` to do nothing.</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// This is used for functions with an optional or no return type.</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    test</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">prepare</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">smtpClient</span><span style=\"color: #24292E\">).</span><span style=\"color: #6F42C1\">when</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;sendMessage&quot;</span><span style=\"color: #24292E\">).</span><span style=\"color: #6F42C1\">doNothing</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\">[] emailIds </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> [</span><span style=\"color: #032F62\">&quot;user1@test.com&quot;</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">&quot;user2@test.com&quot;</span><span style=\"color: #24292E\">];</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">error?</span><span style=\"color: #24292E\"> err </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">sendNotification</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">emailIds</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    test</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">assertEquals</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">err</span><span style=\"color: #24292E\">, ());</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"type-safe-and-concurrent":{"frontmatter":{"title":"Type-safe and concurrent","description":"Ballerina combines the benefits of static typing and native support for concurrency. By catching errors early during development, the language ensures greater reliability and stability in microservices systems. Additionally, Ballerina's concurrency support enables developers to handle concurrent operations efficiently, improving the performance and responsiveness of their microservices.","url":"","image":"images/type-safe-concurrent.png"},"code":""}}},"__N_SSG":true}